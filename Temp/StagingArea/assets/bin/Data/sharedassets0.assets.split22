6_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
mediump float t16_24;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_7.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_7.xyz, t16_7.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_7.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_21, 0.0);
    t16_21 = t16_2.x * t16_2.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_3.x = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_3.x;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_21 * t16_2.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_3.x = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_10 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_10 = inversesqrt(t16_10);
    t16_4.xyz = vec3(t16_10) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_9 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_9);
    t16_0.x = t16_0.x * t16_21;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_7.x = max(_SpecColor.y, _SpecColor.x);
    t16_7.x = max(t16_7.x, _SpecColor.z);
    t16_7.x = (-t16_7.x) + 1.0;
    t16_3.xyz = t16_7.xxx * t16_2.xyz;
    t16_7.x = (-t16_7.x) + _Glossiness;
    t16_7.x = t16_7.x + 1.0;
    t16_7.x = clamp(t16_7.x, 0.0, 1.0);
    t16_7.xyz = t16_7.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_3.xyz = t16_3.xyz * t16_6.xyz;
    t16_24 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_3.xyz = t16_5.xyz * t16_2.xxx + t16_3.xyz;
    t16_24 = dot(t16_1.xyz, t16_4.xyz);
    t16_24 = t16_24 + t16_24;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_24)) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_7.xyz = t16_1.xxx * t16_7.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_1.xyz * vec3(t16_24);
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_7.xyz + t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_8.x = (-t16_8.x) + _Glossiness;
    t16_8.x = t16_8.x + 1.0;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_8.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_0.x = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_2.xyz * t16_0.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_0.x = dot(t16_11.xyz, t10_7.xyz);
    t16_0.x = t16_0.x + 0.5;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_3.x = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_3.x, 0.0);
    t16_4.xyz = t16_5.xyz * t16_2.xxx + t16_4.xyz;
    t16_3.x = dot(t16_1.xyz, t16_11.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_5.xyz = t16_11.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_8.xyz = t16_1.xxx * t16_8.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_3.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    t16_3.xyz = t16_0.xxx * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz * t16_8.xyz + t16_4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
void main()
{
    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_23 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_23, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_23 = dot(t16_2.xyz, t16_4.xyz);
    t16_23 = t16_23 + t16_23;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_23)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump float t16_8;
mediump float t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_26 = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_11 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_11);
    t16_24 = t16_24 * t16_1.x;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_26;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_24) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_24 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_3.xyz * vec3(t16_24);
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_24 = dot(t16_4.xyz, t10_7.xyz);
    t16_24 = t16_24 + 0.5;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_26 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_26 = dot(t16_2.xyz, t16_4.xyz);
    t16_26 = t16_26 + t16_26;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_25 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_25);
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
void main()
{
    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_23 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_23, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_23 = dot(t16_2.xyz, t16_4.xyz);
    t16_23 = t16_23 + t16_23;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_23)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump float t16_8;
mediump float t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_26 = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_11 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_11);
    t16_24 = t16_24 * t16_1.x;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_26;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_24) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_24 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_3.xyz * vec3(t16_24);
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_24 = dot(t16_4.xyz, t10_7.xyz);
    t16_24 = t16_24 + 0.5;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_26 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_26 = dot(t16_2.xyz, t16_4.xyz);
    t16_26 = t16_26 + t16_26;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_25 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_25);
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
highp float t23;
mediump float t16_24;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_7.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_7.xyz, t16_7.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_7.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_21, 0.0);
    t16_21 = t16_2.x * t16_2.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_3.x = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_3.x;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_21 * t16_2.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_3.x = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_10 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_10 = inversesqrt(t16_10);
    t16_4.xyz = vec3(t16_10) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_9 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_9);
    t16_0.x = t16_0.x * t16_21;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_7.x = max(_SpecColor.y, _SpecColor.x);
    t16_7.x = max(t16_7.x, _SpecColor.z);
    t16_7.x = (-t16_7.x) + 1.0;
    t16_3.xyz = t16_7.xxx * t16_2.xyz;
    t16_7.x = (-t16_7.x) + _Glossiness;
    t16_7.x = t16_7.x + 1.0;
    t16_7.x = clamp(t16_7.x, 0.0, 1.0);
    t16_7.xyz = t16_7.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_3.xyz = t16_3.xyz * t16_6.xyz;
    t16_24 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_3.xyz = t16_5.xyz * t16_2.xxx + t16_3.xyz;
    t16_24 = dot(t16_1.xyz, t16_4.xyz);
    t16_24 = t16_24 + t16_24;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_24)) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_7.xyz = t16_1.xxx * t16_7.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_1.xyz * vec3(t16_24);
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_7.xyz + t16_3.xyz;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t23 = vs_TEXCOORD7;
    t23 = clamp(t23, 0.0, 1.0);
    t2.xyz = vec3(t23) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
highp float t26;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_8.x = (-t16_8.x) + _Glossiness;
    t16_8.x = t16_8.x + 1.0;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_8.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_0.x = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_2.xyz * t16_0.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_0.x = dot(t16_11.xyz, t10_7.xyz);
    t16_0.x = t16_0.x + 0.5;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_3.x = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_3.x, 0.0);
    t16_4.xyz = t16_5.xyz * t16_2.xxx + t16_4.xyz;
    t16_3.x = dot(t16_1.xyz, t16_11.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_5.xyz = t16_11.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_8.xyz = t16_1.xxx * t16_8.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_3.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    t16_3.xyz = t16_0.xxx * t16_3.xyz;
    t16_0.xyz = t16_3.xyz * t16_8.xyz + t16_4.xyz;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
highp float t23;
mediump float t16_24;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_7.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_7.xyz, t16_7.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_7.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_21, 0.0);
    t16_21 = t16_2.x * t16_2.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_3.x = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_3.x;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_21 * t16_2.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_3.x = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_10 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_10 = inversesqrt(t16_10);
    t16_4.xyz = vec3(t16_10) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_9 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_9);
    t16_0.x = t16_0.x * t16_21;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_7.x = max(_SpecColor.y, _SpecColor.x);
    t16_7.x = max(t16_7.x, _SpecColor.z);
    t16_7.x = (-t16_7.x) + 1.0;
    t16_3.xyz = t16_7.xxx * t16_2.xyz;
    t16_7.x = (-t16_7.x) + _Glossiness;
    t16_7.x = t16_7.x + 1.0;
    t16_7.x = clamp(t16_7.x, 0.0, 1.0);
    t16_7.xyz = t16_7.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_3.xyz = t16_3.xyz * t16_6.xyz;
    t16_24 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_3.xyz = t16_5.xyz * t16_2.xxx + t16_3.xyz;
    t16_24 = dot(t16_1.xyz, t16_4.xyz);
    t16_24 = t16_24 + t16_24;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_24)) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_7.xyz = t16_1.xxx * t16_7.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_1.xyz * vec3(t16_24);
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_7.xyz + t16_3.xyz;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t23 = vs_TEXCOORD7;
    t23 = clamp(t23, 0.0, 1.0);
    t2.xyz = vec3(t23) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
highp float t26;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_8.x = (-t16_8.x) + _Glossiness;
    t16_8.x = t16_8.x + 1.0;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_8.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_5.xyz = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_5.xyz = t16_5.xyz * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_0.x = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_2.xyz * t16_0.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_0.x = dot(t16_11.xyz, t10_7.xyz);
    t16_0.x = t16_0.x + 0.5;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_0.x = (-_OcclusionStrength) + 1.0;
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    t16_6.xyz = t16_0.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_3.x = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_3.x, 0.0);
    t16_4.xyz = t16_5.xyz * t16_2.xxx + t16_4.xyz;
    t16_3.x = dot(t16_1.xyz, t16_11.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_5.xyz = t16_11.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_8.xyz = t16_1.xxx * t16_8.xyz + _SpecColor.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_3.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    t16_3.xyz = t16_0.xxx * t16_3.xyz;
    t16_0.xyz = t16_3.xyz * t16_8.xyz + t16_4.xyz;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
highp float t24;
void main()
{
    vec3 txVec1 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_23 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_23, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_23 = dot(t16_2.xyz, t16_4.xyz);
    t16_23 = t16_23 + t16_23;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_23)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump float t16_8;
mediump float t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
highp float t27;
void main()
{
    vec3 txVec1 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_26 = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_11 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_11);
    t16_24 = t16_24 * t16_1.x;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_26;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_24) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_24 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_3.xyz * vec3(t16_24);
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_24 = dot(t16_4.xyz, t10_7.xyz);
    t16_24 = t16_24 + 0.5;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_26 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_26 = dot(t16_2.xyz, t16_4.xyz);
    t16_26 = t16_26 + t16_26;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_25 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_25);
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t27 = vs_TEXCOORD7;
    t27 = clamp(t27, 0.0, 1.0);
    t3.xyz = vec3(t27) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_10;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
highp float t24;
void main()
{
    vec3 txVec1 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_23 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_23, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_23 = dot(t16_2.xyz, t16_4.xyz);
    t16_23 = t16_23 + t16_23;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_23)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump float t16_8;
mediump float t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
highp float t27;
void main()
{
    vec3 txVec1 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_26 = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_11 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_11);
    t16_24 = t16_24 * t16_1.x;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_26;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_1.x = (-t16_1.x) + _Glossiness;
    t16_1.x = t16_1.x + 1.0;
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    t16_1.xyz = t16_1.xxx + (-_SpecColor.xyz);
    t16_6.xyz = vec3(t16_24) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_24 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_3.xyz * vec3(t16_24);
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_24 = dot(t16_4.xyz, t10_7.xyz);
    t16_24 = t16_24 + 0.5;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_26 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_26 = dot(t16_2.xyz, t16_4.xyz);
    t16_26 = t16_26 + t16_26;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_2.x, 0.0);
    t16_2.x = (-t16_3.x) + 1.0;
    t16_2.x = t16_2.x * t16_2.x;
    t16_2.x = t16_2.x * t16_2.x;
    t16_1.xyz = t16_2.xxx * t16_1.xyz + _SpecColor.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_25);
    t16_25 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_25);
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t27 = vs_TEXCOORD7;
    t27 = clamp(t27, 0.0, 1.0);
    t3.xyz = vec3(t27) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_3.w) + 1.0;
    t16_4.x = t16_25 * t16_25;
    t16_24 = t16_24 * t10_3.w + t16_4.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_4.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_8.x = (-t16_25) + 1.0;
    t16_16 = log2(t16_25);
    t16_16 = t16_16 * 0.75;
    t16_16 = exp2(t16_16);
    t16_16 = t16_16 * 7.0;
    t16_8.x = t16_8.x * 0.967999995 + 0.0299999993;
    t16_8.x = log2(t16_8.x);
    t16_8.x = 10.0 / t16_8.x;
    t16_8.x = max(t16_8.x, -255.936996);
    t16_24 = t16_8.x * t16_8.x;
    t16_8.x = t16_8.x * t16_8.x + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_8.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_8.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_8.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_8.x = max(t10_3.y, t10_3.x);
    t16_8.x = max(t10_3.z, t16_8.x);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_5.xyz = t16_8.xxx * t16_5.xyz;
    t16_8.x = (-t16_8.x) + 1.0;
    t16_8.x = t16_8.x + t10_3.w;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_8.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_4);
    t16_7.y = dot(unity_SHAg, t16_4);
    t16_7.z = dot(unity_SHAb, t16_4);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_2.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_28 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_28 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_28, 0.0);
    t16_28 = (-t16_2.x) + 1.0;
    t16_28 = t16_28 * t16_28;
    t16_28 = t16_28 * t16_28;
    t16_5.xyz = vec3(t16_28) * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_4.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_16);
    t16_16 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_16);
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_31;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_27, 0.0);
    t16_27 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_3.w) + 1.0;
    t16_4.x = t16_28 * t16_28;
    t16_27 = t16_27 * t10_3.w + t16_4.x;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_11 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_11);
    t16_9.x = (-t16_28) + 1.0;
    t16_18 = log2(t16_28);
    t16_18 = t16_18 * 0.75;
    t16_18 = exp2(t16_18);
    t16_18 = t16_18 * 7.0;
    t16_9.x = t16_9.x * 0.967999995 + 0.0299999993;
    t16_9.x = log2(t16_9.x);
    t16_9.x = 10.0 / t16_9.x;
    t16_9.x = max(t16_9.x, -255.936996);
    t16_27 = t16_9.x * t16_9.x;
    t16_9.x = t16_9.x * t16_9.x + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_9.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_9.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_9.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_9.x = max(t10_3.y, t10_3.x);
    t16_9.x = max(t10_3.z, t16_9.x);
    t16_9.x = (-t16_9.x) + 1.0;
    t16_5.xyz = t16_9.xxx * t16_5.xyz;
    t16_9.x = (-t16_9.x) + 1.0;
    t16_9.x = t16_9.x + t10_3.w;
    t16_9.x = clamp(t16_9.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_9.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_4.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_31, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_31, 0.0);
    t16_31 = (-t16_2.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_3.xyz;
    t16_31 = dot(t16_1.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_18);
    t16_18 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_18);
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_3.w) + 1.0;
    t16_4.x = t16_25 * t16_25;
    t16_24 = t16_24 * t10_3.w + t16_4.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_4.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_8.x = (-t16_25) + 1.0;
    t16_16 = log2(t16_25);
    t16_16 = t16_16 * 0.75;
    t16_16 = exp2(t16_16);
    t16_16 = t16_16 * 7.0;
    t16_8.x = t16_8.x * 0.967999995 + 0.0299999993;
    t16_8.x = log2(t16_8.x);
    t16_8.x = 10.0 / t16_8.x;
    t16_8.x = max(t16_8.x, -255.936996);
    t16_24 = t16_8.x * t16_8.x;
    t16_8.x = t16_8.x * t16_8.x + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_8.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_8.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_8.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_8.x = max(t10_3.y, t10_3.x);
    t16_8.x = max(t10_3.z, t16_8.x);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_5.xyz = t16_8.xxx * t16_5.xyz;
    t16_8.x = (-t16_8.x) + 1.0;
    t16_8.x = t16_8.x + t10_3.w;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_8.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_4);
    t16_7.y = dot(unity_SHAg, t16_4);
    t16_7.z = dot(unity_SHAb, t16_4);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_2.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_28 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_28 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_28, 0.0);
    t16_28 = (-t16_2.x) + 1.0;
    t16_28 = t16_28 * t16_28;
    t16_28 = t16_28 * t16_28;
    t16_5.xyz = vec3(t16_28) * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_4.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_16);
    t16_16 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_16);
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_31;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_27, 0.0);
    t16_27 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_3.w) + 1.0;
    t16_4.x = t16_28 * t16_28;
    t16_27 = t16_27 * t10_3.w + t16_4.x;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_11 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_11);
    t16_9.x = (-t16_28) + 1.0;
    t16_18 = log2(t16_28);
    t16_18 = t16_18 * 0.75;
    t16_18 = exp2(t16_18);
    t16_18 = t16_18 * 7.0;
    t16_9.x = t16_9.x * 0.967999995 + 0.0299999993;
    t16_9.x = log2(t16_9.x);
    t16_9.x = 10.0 / t16_9.x;
    t16_9.x = max(t16_9.x, -255.936996);
    t16_27 = t16_9.x * t16_9.x;
    t16_9.x = t16_9.x * t16_9.x + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_9.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_9.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_9.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_9.x = max(t10_3.y, t10_3.x);
    t16_9.x = max(t10_3.z, t16_9.x);
    t16_9.x = (-t16_9.x) + 1.0;
    t16_5.xyz = t16_9.xxx * t16_5.xyz;
    t16_9.x = (-t16_9.x) + 1.0;
    t16_9.x = t16_9.x + t10_3.w;
    t16_9.x = clamp(t16_9.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_9.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_4.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_31, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_31, 0.0);
    t16_31 = (-t16_2.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_3.xyz;
    t16_31 = dot(t16_1.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_18);
    t16_18 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_18);
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
lowp vec4 t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_11;
mediump float t16_17;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    vec3 txVec2 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_4.w) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * t10_4.w + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_5.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_24 = dot(t16_5.xyz, t16_1.xyz);
    t16_11 = max(t16_24, 0.0);
    t16_24 = log2(t16_11);
    t16_1.x = (-t16_25) + 1.0;
    t16_9 = log2(t16_25);
    t16_9 = t16_9 * 0.75;
    t16_9 = exp2(t16_9);
    t16_9 = t16_9 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_17 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_24 = t16_24 * t16_17;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_1.x;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_26 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_26);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_26 = max(t10_4.y, t10_4.x);
    t16_26 = max(t10_4.z, t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_26 = t16_26 + t10_4.w;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_26);
    t16_7.xyz = vec3(t16_24) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_5.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_5);
    t16_7.y = dot(unity_SHAg, t16_5);
    t16_7.z = dot(unity_SHAb, t16_5);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_26 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_26 = dot(t16_2.xyz, t16_5.xyz);
    t16_26 = t16_26 + t16_26;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_9);
    t16_9 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_9);
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    SV_Target0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
void main()
{
    vec3 txVec2 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_4.w) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * t10_4.w + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_5.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_27 = dot(t16_5.xyz, t16_1.xyz);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t16_1.x = (-t16_28) + 1.0;
    t16_10 = log2(t16_28);
    t16_10 = t16_10 * 0.75;
    t16_10 = exp2(t16_10);
    t16_10 = t16_10 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_19 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_27 = t16_27 * t16_19;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_1.x;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_29 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_29);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_29 = max(t10_4.y, t10_4.x);
    t16_29 = max(t10_4.z, t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_29 = t16_29 + t10_4.w;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_29);
    t16_7.xyz = vec3(t16_27) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_5.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_29 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_29, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_29 = dot(t16_2.xyz, t16_5.xyz);
    t16_29 = t16_29 + t16_29;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_29)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_10);
    t16_10 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_10);
    t16_5.xyz = vec3(t16_27) * t16_5.xyz;
    SV_Target0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
lowp vec4 t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_11;
mediump float t16_17;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    vec3 txVec2 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_4.w) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * t10_4.w + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_5.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_24 = dot(t16_5.xyz, t16_1.xyz);
    t16_11 = max(t16_24, 0.0);
    t16_24 = log2(t16_11);
    t16_1.x = (-t16_25) + 1.0;
    t16_9 = log2(t16_25);
    t16_9 = t16_9 * 0.75;
    t16_9 = exp2(t16_9);
    t16_9 = t16_9 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_17 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_24 = t16_24 * t16_17;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_1.x;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_26 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_26);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_26 = max(t10_4.y, t10_4.x);
    t16_26 = max(t10_4.z, t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_26 = t16_26 + t10_4.w;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_26);
    t16_7.xyz = vec3(t16_24) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_5.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_5);
    t16_7.y = dot(unity_SHAg, t16_5);
    t16_7.z = dot(unity_SHAb, t16_5);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_26 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_26 = dot(t16_2.xyz, t16_5.xyz);
    t16_26 = t16_26 + t16_26;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_9);
    t16_9 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_9);
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    SV_Target0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
void main()
{
    vec3 txVec2 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_4.w) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * t10_4.w + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_5.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_27 = dot(t16_5.xyz, t16_1.xyz);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t16_1.x = (-t16_28) + 1.0;
    t16_10 = log2(t16_28);
    t16_10 = t16_10 * 0.75;
    t16_10 = exp2(t16_10);
    t16_10 = t16_10 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_19 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_27 = t16_27 * t16_19;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_1.x;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_29 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_29);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_29 = max(t10_4.y, t10_4.x);
    t16_29 = max(t10_4.z, t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_29 = t16_29 + t10_4.w;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_29);
    t16_7.xyz = vec3(t16_27) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_5.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_29 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_29, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_29 = dot(t16_2.xyz, t16_5.xyz);
    t16_29 = t16_29 + t16_29;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_29)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_10);
    t16_10 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_10);
    t16_5.xyz = vec3(t16_27) * t16_5.xyz;
    SV_Target0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
highp float t26;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_3.w) + 1.0;
    t16_4.x = t16_25 * t16_25;
    t16_24 = t16_24 * t10_3.w + t16_4.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_4.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_8.x = (-t16_25) + 1.0;
    t16_16 = log2(t16_25);
    t16_16 = t16_16 * 0.75;
    t16_16 = exp2(t16_16);
    t16_16 = t16_16 * 7.0;
    t16_8.x = t16_8.x * 0.967999995 + 0.0299999993;
    t16_8.x = log2(t16_8.x);
    t16_8.x = 10.0 / t16_8.x;
    t16_8.x = max(t16_8.x, -255.936996);
    t16_24 = t16_8.x * t16_8.x;
    t16_8.x = t16_8.x * t16_8.x + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_8.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_8.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_8.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_8.x = max(t10_3.y, t10_3.x);
    t16_8.x = max(t10_3.z, t16_8.x);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_5.xyz = t16_8.xxx * t16_5.xyz;
    t16_8.x = (-t16_8.x) + 1.0;
    t16_8.x = t16_8.x + t10_3.w;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_8.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_4);
    t16_7.y = dot(unity_SHAg, t16_4);
    t16_7.z = dot(unity_SHAb, t16_4);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_2.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_28 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_28 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_28, 0.0);
    t16_28 = (-t16_2.x) + 1.0;
    t16_28 = t16_28 * t16_28;
    t16_28 = t16_28 * t16_28;
    t16_5.xyz = vec3(t16_28) * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_4.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_16);
    t16_16 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_16);
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
highp float t29;
mediump float t16_31;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_27, 0.0);
    t16_27 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_3.w) + 1.0;
    t16_4.x = t16_28 * t16_28;
    t16_27 = t16_27 * t10_3.w + t16_4.x;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_11 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_11);
    t16_9.x = (-t16_28) + 1.0;
    t16_18 = log2(t16_28);
    t16_18 = t16_18 * 0.75;
    t16_18 = exp2(t16_18);
    t16_18 = t16_18 * 7.0;
    t16_9.x = t16_9.x * 0.967999995 + 0.0299999993;
    t16_9.x = log2(t16_9.x);
    t16_9.x = 10.0 / t16_9.x;
    t16_9.x = max(t16_9.x, -255.936996);
    t16_27 = t16_9.x * t16_9.x;
    t16_9.x = t16_9.x * t16_9.x + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_9.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_9.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_9.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_9.x = max(t10_3.y, t10_3.x);
    t16_9.x = max(t10_3.z, t16_9.x);
    t16_9.x = (-t16_9.x) + 1.0;
    t16_5.xyz = t16_9.xxx * t16_5.xyz;
    t16_9.x = (-t16_9.x) + 1.0;
    t16_9.x = t16_9.x + t10_3.w;
    t16_9.x = clamp(t16_9.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_9.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_4.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_31, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_31, 0.0);
    t16_31 = (-t16_2.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_3.xyz;
    t16_31 = dot(t16_1.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_18);
    t16_18 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_18);
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t2.xyz = vec3(t29) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_10;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
highp float t26;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_3.w) + 1.0;
    t16_4.x = t16_25 * t16_25;
    t16_24 = t16_24 * t10_3.w + t16_4.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_4.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_8.x = (-t16_25) + 1.0;
    t16_16 = log2(t16_25);
    t16_16 = t16_16 * 0.75;
    t16_16 = exp2(t16_16);
    t16_16 = t16_16 * 7.0;
    t16_8.x = t16_8.x * 0.967999995 + 0.0299999993;
    t16_8.x = log2(t16_8.x);
    t16_8.x = 10.0 / t16_8.x;
    t16_8.x = max(t16_8.x, -255.936996);
    t16_24 = t16_8.x * t16_8.x;
    t16_8.x = t16_8.x * t16_8.x + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_8.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_8.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_8.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_8.x = max(t10_3.y, t10_3.x);
    t16_8.x = max(t10_3.z, t16_8.x);
    t16_8.x = (-t16_8.x) + 1.0;
    t16_5.xyz = t16_8.xxx * t16_5.xyz;
    t16_8.x = (-t16_8.x) + 1.0;
    t16_8.x = t16_8.x + t10_3.w;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_8.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_4);
    t16_7.y = dot(unity_SHAg, t16_4);
    t16_7.z = dot(unity_SHAb, t16_4);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_2.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_28 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_28 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_28, 0.0);
    t16_28 = (-t16_2.x) + 1.0;
    t16_28 = t16_28 * t16_28;
    t16_28 = t16_28 * t16_28;
    t16_5.xyz = vec3(t16_28) * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_4.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_16);
    t16_16 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_16);
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
highp float t29;
mediump float t16_31;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_27, 0.0);
    t16_27 = t16_2.x * t16_2.x;
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_3.w) + 1.0;
    t16_4.x = t16_28 * t16_28;
    t16_27 = t16_27 * t10_3.w + t16_4.x;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_11 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_11);
    t16_9.x = (-t16_28) + 1.0;
    t16_18 = log2(t16_28);
    t16_18 = t16_18 * 0.75;
    t16_18 = exp2(t16_18);
    t16_18 = t16_18 * 7.0;
    t16_9.x = t16_9.x * 0.967999995 + 0.0299999993;
    t16_9.x = log2(t16_9.x);
    t16_9.x = 10.0 / t16_9.x;
    t16_9.x = max(t16_9.x, -255.936996);
    t16_27 = t16_9.x * t16_9.x;
    t16_9.x = t16_9.x * t16_9.x + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_9.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_9.x = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + t16_9.xxx;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_9.x = max(t10_3.y, t10_3.x);
    t16_9.x = max(t10_3.z, t16_9.x);
    t16_9.x = (-t16_9.x) + 1.0;
    t16_5.xyz = t16_9.xxx * t16_5.xyz;
    t16_9.x = (-t16_9.x) + 1.0;
    t16_9.x = t16_9.x + t10_3.w;
    t16_9.x = clamp(t16_9.x, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + t16_9.xxx;
    t16_0.xyw = t16_0.xxx * t10_3.xyz + t16_5.xyz;
    t16_0.xyw = t16_0.xyw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_4.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_31, 0.0);
    t16_0.xyw = t16_0.xyw * t16_2.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_31, 0.0);
    t16_31 = (-t16_2.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_3.xyz;
    t16_31 = dot(t16_1.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_1.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_18);
    t16_18 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * vec3(t16_18);
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xyw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t2.xyz = vec3(t29) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec3 t10_3;
lowp vec4 t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_11;
mediump float t16_17;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
highp float t27;
void main()
{
    vec3 txVec3 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_4.w) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * t10_4.w + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_5.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_24 = dot(t16_5.xyz, t16_1.xyz);
    t16_11 = max(t16_24, 0.0);
    t16_24 = log2(t16_11);
    t16_1.x = (-t16_25) + 1.0;
    t16_9 = log2(t16_25);
    t16_9 = t16_9 * 0.75;
    t16_9 = exp2(t16_9);
    t16_9 = t16_9 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_17 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_24 = t16_24 * t16_17;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_1.x;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_26 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_26);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_26 = max(t10_4.y, t10_4.x);
    t16_26 = max(t10_4.z, t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_26 = t16_26 + t10_4.w;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_26);
    t16_7.xyz = vec3(t16_24) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_5.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_5);
    t16_7.y = dot(unity_SHAg, t16_5);
    t16_7.z = dot(unity_SHAb, t16_5);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_26 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_26 = dot(t16_2.xyz, t16_5.xyz);
    t16_26 = t16_26 + t16_26;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_9);
    t16_9 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_9);
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    t16_0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t27 = vs_TEXCOORD7;
    t27 = clamp(t27, 0.0, 1.0);
    t3.xyz = vec3(t27) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
highp float t30;
void main()
{
    vec3 txVec3 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_4.w) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * t10_4.w + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_5.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_27 = dot(t16_5.xyz, t16_1.xyz);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t16_1.x = (-t16_28) + 1.0;
    t16_10 = log2(t16_28);
    t16_10 = t16_10 * 0.75;
    t16_10 = exp2(t16_10);
    t16_10 = t16_10 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_19 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_27 = t16_27 * t16_19;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_1.x;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_29 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_29);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_29 = max(t10_4.y, t10_4.x);
    t16_29 = max(t10_4.z, t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_29 = t16_29 + t10_4.w;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_29);
    t16_7.xyz = vec3(t16_27) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_5.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_29 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_29, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_29 = dot(t16_2.xyz, t16_5.xyz);
    t16_29 = t16_29 + t16_29;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_29)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_10);
    t16_10 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_10);
    t16_5.xyz = vec3(t16_27) * t16_5.xyz;
    t16_0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec3 t10_3;
lowp vec4 t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_11;
mediump float t16_17;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
highp float t27;
void main()
{
    vec3 txVec3 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.0);
    t16_24 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_25 = (-t10_4.w) + 1.0;
    t16_26 = t16_25 * t16_25;
    t16_24 = t16_24 * t10_4.w + t16_26;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_24 * t16_3.x + 9.99999975e-005;
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_5.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    t16_24 = dot(t16_5.xyz, t16_1.xyz);
    t16_11 = max(t16_24, 0.0);
    t16_24 = log2(t16_11);
    t16_1.x = (-t16_25) + 1.0;
    t16_9 = log2(t16_25);
    t16_9 = t16_9 * 0.75;
    t16_9 = exp2(t16_9);
    t16_9 = t16_9 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_17 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_24 = t16_24 * t16_17;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_1.x;
    t16_3.x = t16_24 / t16_3.x;
    t16_24 = max(t16_3.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_26 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_26);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_26 = max(t10_4.y, t10_4.x);
    t16_26 = max(t10_4.z, t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_26);
    t16_26 = (-t16_26) + 1.0;
    t16_26 = t16_26 + t10_4.w;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_26);
    t16_7.xyz = vec3(t16_24) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_5.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_5);
    t16_7.y = dot(unity_SHAg, t16_5);
    t16_7.z = dot(unity_SHAb, t16_5);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_3.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_26 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_26, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_26 = dot(t16_2.xyz, t16_5.xyz);
    t16_26 = t16_26 + t16_26;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_26)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_9);
    t16_9 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_9);
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    t16_0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t27 = vs_TEXCOORD7;
    t27 = clamp(t27, 0.0, 1.0);
    t3.xyz = vec3(t27) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
highp float t30;
void main()
{
    vec3 txVec3 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_28 = (-t10_4.w) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * t10_4.w + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_5.xyz = vec3(t16_27) * vs_TEXCOORD4.xyz;
    t16_27 = dot(t16_5.xyz, t16_1.xyz);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t16_1.x = (-t16_28) + 1.0;
    t16_10 = log2(t16_28);
    t16_10 = t16_10 * 0.75;
    t16_10 = exp2(t16_10);
    t16_10 = t16_10 * 7.0;
    t16_1.x = t16_1.x * 0.967999995 + 0.0299999993;
    t16_1.x = log2(t16_1.x);
    t16_1.x = 10.0 / t16_1.x;
    t16_1.x = max(t16_1.x, -255.936996);
    t16_19 = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x + 1.0;
    t16_27 = t16_27 * t16_19;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_1.x;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_1.xzw = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_29 = (-t10_3.x) + 1.0;
    t16_1.xzw = t16_1.xzw * t10_3.xxx + vec3(t16_29);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_1.xzw = t16_1.xzw * t16_3.xyz;
    t16_29 = max(t10_4.y, t10_4.x);
    t16_29 = max(t10_4.z, t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_1.xzw = t16_1.xzw * vec3(t16_29);
    t16_29 = (-t16_29) + 1.0;
    t16_29 = t16_29 + t10_4.w;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_29);
    t16_7.xyz = vec3(t16_27) * t10_4.xyz + t16_1.xzw;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_5.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_1.xzw = t16_1.xzw * t16_7.xyz;
    t16_29 = dot(t16_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_29, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_1.xzw;
    t16_1.x = dot(t16_5.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_3.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.xzw = t16_1.xxx * t16_6.xyz + t10_4.xyz;
    t16_29 = dot(t16_2.xyz, t16_5.xyz);
    t16_29 = t16_29 + t16_29;
    t16_2.xyz = t16_5.xyz * (-vec3(t16_29)) + t16_2.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_2.xyz, t16_10);
    t16_10 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_5.xyz = t10_2.xyz * vec3(t16_10);
    t16_5.xyz = vec3(t16_27) * t16_5.xyz;
    t16_0.xyz = t16_5.xyz * t16_1.xzw + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_18;
mediump float t16_19;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_6.xyz, t16_6.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_6.xyz;
    t16_18 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_18, 0.0);
    t16_18 = t16_2.x * t16_2.x;
    t16_19 = (-_Glossiness) + 1.0;
    t16_3.x = t16_19 * t16_19;
    t16_18 = t16_18 * _Glossiness + t16_3.x;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_18 = (-t16_19) + 1.0;
    t16_19 = log2(t16_19);
    t16_19 = t16_19 * 0.75;
    t16_19 = exp2(t16_19);
    t16_19 = t16_19 * 7.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_3.x = t16_18 * t16_18 + 1.0;
    t16_18 = t16_18 * t16_18;
    t16_9 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_9 = inversesqrt(t16_9);
    t16_4.xyz = vec3(t16_9) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_8 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_8);
    t16_0.x = t16_0.x * t16_18;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_6.x = max(_SpecColor.y, _SpecColor.x);
    t16_6.x = max(t16_6.x, _SpecColor.z);
    t16_6.x = (-t16_6.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_3.xyz = t16_6.xxx * t16_2.xyz;
    t16_3.xyz = t16_2.www * t16_3.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_4);
    t16_5.y = dot(unity_SHAg, t16_4);
    t16_5.z = dot(unity_SHAb, t16_4);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_2.x * _OcclusionStrength + t16_21;
    t16_5.xyz = vec3(t16_21) * t16_5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_22 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_22, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_3.xyz;
    t16_3.x = dot(t16_1.xyz, t16_4.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_3.xyz, t16_19);
    t16_7.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_7.xyz = t10_4.xyz * t16_7.xxx;
    t16_7.xyz = vec3(t16_21) * t16_7.xyz;
    t16_3.x = (-t16_6.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_6.x + t16_3.x;
    t16_6.x = t16_3.x + _Glossiness;
    t16_6.x = clamp(t16_6.x, 0.0, 1.0);
    t16_3.xyz = t16_6.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    SV_Target0.xyz = t16_7.xyz * t16_3.xyz + t16_0.xzw;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
lowp vec4 t10_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_4.xyz = t16_2.www * t16_4.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_3.x = t10_5.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_5.xyz * t16_3.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_5 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_5.xyz + vec3(-0.5, -0.5, -0.5);
    t16_3.x = dot(t16_11.xyz, t10_7.xyz);
    t16_3.x = t16_3.x + 0.5;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_5.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_3.x = (-_OcclusionStrength) + 1.0;
    t16_3.x = t10_2.x * _OcclusionStrength + t16_3.x;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_4.xyz;
    t16_4.x = dot(t16_1.xyz, t16_11.xyz);
    t16_4.x = t16_4.x + t16_4.x;
    t16_4.xyz = t16_11.xyz * (-t16_4.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_4.xyz, t16_25);
    t16_9.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_9.xyz = t10_4.xyz * t16_9.xxx;
    t16_9.xyz = t16_3.xxx * t16_9.xyz;
    t16_3.x = (-t16_8.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_8.x + t16_3.x;
    t16_8.x = t16_3.x + _Glossiness;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_3.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    SV_Target0.xyz = t16_9.xyz * t16_3.xyz + t16_0.xzw;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_18;
mediump float t16_19;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_6.xyz, t16_6.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_6.xyz;
    t16_18 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_18, 0.0);
    t16_18 = t16_2.x * t16_2.x;
    t16_19 = (-_Glossiness) + 1.0;
    t16_3.x = t16_19 * t16_19;
    t16_18 = t16_18 * _Glossiness + t16_3.x;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_18 = (-t16_19) + 1.0;
    t16_19 = log2(t16_19);
    t16_19 = t16_19 * 0.75;
    t16_19 = exp2(t16_19);
    t16_19 = t16_19 * 7.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_3.x = t16_18 * t16_18 + 1.0;
    t16_18 = t16_18 * t16_18;
    t16_9 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_9 = inversesqrt(t16_9);
    t16_4.xyz = vec3(t16_9) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_8 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_8);
    t16_0.x = t16_0.x * t16_18;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_6.x = max(_SpecColor.y, _SpecColor.x);
    t16_6.x = max(t16_6.x, _SpecColor.z);
    t16_6.x = (-t16_6.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_3.xyz = t16_6.xxx * t16_2.xyz;
    t16_3.xyz = t16_2.www * t16_3.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_4);
    t16_5.y = dot(unity_SHAg, t16_4);
    t16_5.z = dot(unity_SHAb, t16_4);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_2.x * _OcclusionStrength + t16_21;
    t16_5.xyz = vec3(t16_21) * t16_5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_22 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_22, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_3.xyz;
    t16_3.x = dot(t16_1.xyz, t16_4.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_3.xyz, t16_19);
    t16_7.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_7.xyz = t10_4.xyz * t16_7.xxx;
    t16_7.xyz = vec3(t16_21) * t16_7.xyz;
    t16_3.x = (-t16_6.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_6.x + t16_3.x;
    t16_6.x = t16_3.x + _Glossiness;
    t16_6.x = clamp(t16_6.x, 0.0, 1.0);
    t16_3.xyz = t16_6.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    SV_Target0.xyz = t16_7.xyz * t16_3.xyz + t16_0.xzw;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
lowp vec4 t10_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_4.xyz = t16_2.www * t16_4.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_3.x = t10_5.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_5.xyz * t16_3.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_5 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_5.xyz + vec3(-0.5, -0.5, -0.5);
    t16_3.x = dot(t16_11.xyz, t10_7.xyz);
    t16_3.x = t16_3.x + 0.5;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_5.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_3.x = (-_OcclusionStrength) + 1.0;
    t16_3.x = t10_2.x * _OcclusionStrength + t16_3.x;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_4.xyz;
    t16_4.x = dot(t16_1.xyz, t16_11.xyz);
    t16_4.x = t16_4.x + t16_4.x;
    t16_4.xyz = t16_11.xyz * (-t16_4.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_4.xyz, t16_25);
    t16_9.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_9.xyz = t10_4.xyz * t16_9.xxx;
    t16_9.xyz = t16_3.xxx * t16_9.xyz;
    t16_3.x = (-t16_8.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_8.x + t16_3.x;
    t16_8.x = t16_3.x + _Glossiness;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_3.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    SV_Target0.xyz = t16_9.xyz * t16_3.xyz + t16_0.xzw;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
void main()
{
    vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_8 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_8, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_8 = dot(t16_2.xyz, t16_4.xyz);
    t16_8 = t16_8 + t16_8;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_8)) + t16_2.xyz;
    t16_8 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_8, 0.0);
    t16_8 = (-t16_3.x) + 1.0;
    t16_8 = t16_8 * t16_8;
    t16_8 = t16_8 * t16_8;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_15 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_15);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_21 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_21;
    t16_21 = t16_21 + _Glossiness;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    t16_1.xzw = vec3(t16_21) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_8) * t16_1.xzw + _SpecColor.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec4 t10_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
void main()
{
    vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t16_28 = (-_Glossiness) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * _Glossiness + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = (-t16_28) + 1.0;
    t16_28 = log2(t16_28);
    t16_28 = t16_28 * 0.75;
    t16_28 = exp2(t16_28);
    t16_28 = t16_28 * 7.0;
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    t16_27 = log2(t16_27);
    t16_27 = 10.0 / t16_27;
    t16_27 = max(t16_27, -255.936996);
    t16_29 = t16_27 * t16_27 + 1.0;
    t16_27 = t16_27 * t16_27;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_12 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_12);
    t16_27 = t16_27 * t16_1.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_29;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_27) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_6.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_6.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_6.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_6.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_10 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_10, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_10 = dot(t16_2.xyz, t16_4.xyz);
    t16_10 = t16_10 + t16_10;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_10)) + t16_2.xyz;
    t16_10 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_10, 0.0);
    t16_10 = (-t16_3.x) + 1.0;
    t16_10 = t16_10 * t16_10;
    t16_10 = t16_10 * t16_10;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_28);
    t16_19 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_19);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_27;
    t16_27 = t16_27 + _Glossiness;
    t16_27 = clamp(t16_27, 0.0, 1.0);
    t16_1.xzw = vec3(t16_27) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_10) * t16_1.xzw + _SpecColor.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
void main()
{
    vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_8 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_8, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_8 = dot(t16_2.xyz, t16_4.xyz);
    t16_8 = t16_8 + t16_8;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_8)) + t16_2.xyz;
    t16_8 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_8, 0.0);
    t16_8 = (-t16_3.x) + 1.0;
    t16_8 = t16_8 * t16_8;
    t16_8 = t16_8 * t16_8;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_15 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_15);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_21 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_21;
    t16_21 = t16_21 + _Glossiness;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    t16_1.xzw = vec3(t16_21) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_8) * t16_1.xzw + _SpecColor.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec4 t10_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
void main()
{
    vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t16_28 = (-_Glossiness) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * _Glossiness + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = (-t16_28) + 1.0;
    t16_28 = log2(t16_28);
    t16_28 = t16_28 * 0.75;
    t16_28 = exp2(t16_28);
    t16_28 = t16_28 * 7.0;
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    t16_27 = log2(t16_27);
    t16_27 = 10.0 / t16_27;
    t16_27 = max(t16_27, -255.936996);
    t16_29 = t16_27 * t16_27 + 1.0;
    t16_27 = t16_27 * t16_27;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_12 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_12);
    t16_27 = t16_27 * t16_1.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_29;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_27) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_6.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_6.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_6.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_6.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_10 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_10, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_10 = dot(t16_2.xyz, t16_4.xyz);
    t16_10 = t16_10 + t16_10;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_10)) + t16_2.xyz;
    t16_10 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_10, 0.0);
    t16_10 = (-t16_3.x) + 1.0;
    t16_10 = t16_10 * t16_10;
    t16_10 = t16_10 * t16_10;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_28);
    t16_19 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_19);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_27;
    t16_27 = t16_27 + _Glossiness;
    t16_27 = clamp(t16_27, 0.0, 1.0);
    t16_1.xzw = vec3(t16_27) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_10) * t16_1.xzw + _SpecColor.xyz;
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_18;
mediump float t16_19;
highp float t20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_6.xyz, t16_6.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_6.xyz;
    t16_18 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_18, 0.0);
    t16_18 = t16_2.x * t16_2.x;
    t16_19 = (-_Glossiness) + 1.0;
    t16_3.x = t16_19 * t16_19;
    t16_18 = t16_18 * _Glossiness + t16_3.x;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_18 = (-t16_19) + 1.0;
    t16_19 = log2(t16_19);
    t16_19 = t16_19 * 0.75;
    t16_19 = exp2(t16_19);
    t16_19 = t16_19 * 7.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_3.x = t16_18 * t16_18 + 1.0;
    t16_18 = t16_18 * t16_18;
    t16_9 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_9 = inversesqrt(t16_9);
    t16_4.xyz = vec3(t16_9) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_8 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_8);
    t16_0.x = t16_0.x * t16_18;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_6.x = max(_SpecColor.y, _SpecColor.x);
    t16_6.x = max(t16_6.x, _SpecColor.z);
    t16_6.x = (-t16_6.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_3.xyz = t16_6.xxx * t16_2.xyz;
    t16_3.xyz = t16_2.www * t16_3.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_4);
    t16_5.y = dot(unity_SHAg, t16_4);
    t16_5.z = dot(unity_SHAb, t16_4);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_2.x * _OcclusionStrength + t16_21;
    t16_5.xyz = vec3(t16_21) * t16_5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_22 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_22, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_3.xyz;
    t16_3.x = dot(t16_1.xyz, t16_4.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_3.xyz, t16_19);
    t16_7.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_7.xyz = t10_4.xyz * t16_7.xxx;
    t16_7.xyz = vec3(t16_21) * t16_7.xyz;
    t16_3.x = (-t16_6.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_6.x + t16_3.x;
    t16_6.x = t16_3.x + _Glossiness;
    t16_6.x = clamp(t16_6.x, 0.0, 1.0);
    t16_3.xyz = t16_6.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    t16_0.xyz = t16_7.xyz * t16_3.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t20 = vs_TEXCOORD7;
    t20 = clamp(t20, 0.0, 1.0);
    t2.xyz = vec3(t20) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
lowp vec4 t10_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
highp float t26;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_4.xyz = t16_2.www * t16_4.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_3.x = t10_5.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_5.xyz * t16_3.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_5 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_5.xyz + vec3(-0.5, -0.5, -0.5);
    t16_3.x = dot(t16_11.xyz, t10_7.xyz);
    t16_3.x = t16_3.x + 0.5;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_5.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_3.x = (-_OcclusionStrength) + 1.0;
    t16_3.x = t10_2.x * _OcclusionStrength + t16_3.x;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_4.xyz;
    t16_4.x = dot(t16_1.xyz, t16_11.xyz);
    t16_4.x = t16_4.x + t16_4.x;
    t16_4.xyz = t16_11.xyz * (-t16_4.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_4.xyz, t16_25);
    t16_9.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_9.xyz = t10_4.xyz * t16_9.xxx;
    t16_9.xyz = t16_3.xxx * t16_9.xyz;
    t16_3.x = (-t16_8.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_8.x + t16_3.x;
    t16_8.x = t16_3.x + _Glossiness;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_3.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    t16_0.xyz = t16_9.xyz * t16_3.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_9;
mediump float t16_18;
mediump float t16_19;
highp float t20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_6.xyz, t16_6.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_6.xyz;
    t16_18 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_18, 0.0);
    t16_18 = t16_2.x * t16_2.x;
    t16_19 = (-_Glossiness) + 1.0;
    t16_3.x = t16_19 * t16_19;
    t16_18 = t16_18 * _Glossiness + t16_3.x;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_18 = (-t16_19) + 1.0;
    t16_19 = log2(t16_19);
    t16_19 = t16_19 * 0.75;
    t16_19 = exp2(t16_19);
    t16_19 = t16_19 * 7.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_3.x = t16_18 * t16_18 + 1.0;
    t16_18 = t16_18 * t16_18;
    t16_9 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_9 = inversesqrt(t16_9);
    t16_4.xyz = vec3(t16_9) * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    t16_8 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_8);
    t16_0.x = t16_0.x * t16_18;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_6.x = max(_SpecColor.y, _SpecColor.x);
    t16_6.x = max(t16_6.x, _SpecColor.z);
    t16_6.x = (-t16_6.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_3.xyz = t16_6.xxx * t16_2.xyz;
    t16_3.xyz = t16_2.www * t16_3.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_3.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_4.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_4);
    t16_5.y = dot(unity_SHAg, t16_4);
    t16_5.z = dot(unity_SHAb, t16_4);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_2.x * _OcclusionStrength + t16_21;
    t16_5.xyz = vec3(t16_21) * t16_5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_22 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_22, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_3.xyz;
    t16_3.x = dot(t16_1.xyz, t16_4.xyz);
    t16_3.x = t16_3.x + t16_3.x;
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_3.xyz, t16_19);
    t16_7.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_7.xyz = t10_4.xyz * t16_7.xxx;
    t16_7.xyz = vec3(t16_21) * t16_7.xyz;
    t16_3.x = (-t16_6.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_6.x + t16_3.x;
    t16_6.x = t16_3.x + _Glossiness;
    t16_6.x = clamp(t16_6.x, 0.0, 1.0);
    t16_3.xyz = t16_6.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    t16_0.xyz = t16_7.xyz * t16_3.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t20 = vs_TEXCOORD7;
    t20 = clamp(t20, 0.0, 1.0);
    t2.xyz = vec3(t20) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
lowp vec4 t10_5;
mediump vec3 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_10;
mediump vec3 t16_11;
mediump float t16_24;
mediump float t16_25;
highp float t26;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t16_24 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.x = max(t16_24, 0.0);
    t16_24 = t16_2.x * t16_2.x;
    t16_25 = (-_Glossiness) + 1.0;
    t16_3.x = t16_25 * t16_25;
    t16_24 = t16_24 * _Glossiness + t16_3.x;
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_24 * t16_2.x + 9.99999975e-005;
    t16_24 = (-t16_25) + 1.0;
    t16_25 = log2(t16_25);
    t16_25 = t16_25 * 0.75;
    t16_25 = exp2(t16_25);
    t16_25 = t16_25 * 7.0;
    t16_24 = t16_24 * 0.967999995 + 0.0299999993;
    t16_24 = log2(t16_24);
    t16_24 = 10.0 / t16_24;
    t16_24 = max(t16_24, -255.936996);
    t16_3.x = t16_24 * t16_24 + 1.0;
    t16_24 = t16_24 * t16_24;
    t16_11.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_11.x = inversesqrt(t16_11.x);
    t16_11.xyz = t16_11.xxx * vs_TEXCOORD4.xyz;
    t16_0.x = dot(t16_11.xyz, t16_0.xyz);
    t16_10 = max(t16_0.x, 0.0);
    t16_0.x = log2(t16_10);
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.x = t16_0.x * t16_3.x;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t16_8.x = max(_SpecColor.y, _SpecColor.x);
    t16_8.x = max(t16_8.x, _SpecColor.z);
    t16_8.x = (-t16_8.x) + 1.0;
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_2 = t10_2 * _Color;
    t16_4.xyz = t16_8.xxx * t16_2.xyz;
    t16_4.xyz = t16_2.www * t16_4.xyz;
    t16_0.xzw = t16_0.xxx * _SpecColor.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_3.x = t10_5.w * unity_DynamicLightmap_HDR.x;
    t16_6.xyz = t10_5.xyz * t16_3.xxx;
    t16_6.xyz = log2(t16_6.xyz);
    t16_6.xyz = t16_6.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_6.xyz = exp2(t16_6.xyz);
    t10_5 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_7.xyz = t10_5.xyz + vec3(-0.5, -0.5, -0.5);
    t16_3.x = dot(t16_11.xyz, t10_7.xyz);
    t16_3.x = t16_3.x + 0.5;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_6.xyz = t16_6.xyz / t10_5.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_3.x = (-_OcclusionStrength) + 1.0;
    t16_3.x = t10_2.x * _OcclusionStrength + t16_3.x;
    t16_6.xyz = t16_3.xxx * t16_6.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = dot(t16_11.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_4.xyz;
    t16_4.x = dot(t16_1.xyz, t16_11.xyz);
    t16_4.x = t16_4.x + t16_4.x;
    t16_4.xyz = t16_11.xyz * (-t16_4.xxx) + t16_1.xyz;
    t16_1.x = dot(t16_11.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_1.x, 0.0);
    t16_1.x = (-t16_2.x) + 1.0;
    t16_1.x = t16_1.x * t16_1.x;
    t16_1.x = t16_1.x * t16_1.x;
    t10_4 = textureLod(unity_SpecCube0, t16_4.xyz, t16_25);
    t16_9.x = t10_4.w * unity_SpecCube0_HDR.x;
    t16_9.xyz = t10_4.xyz * t16_9.xxx;
    t16_9.xyz = t16_3.xxx * t16_9.xyz;
    t16_3.x = (-t16_8.x) + 1.0;
    SV_Target0.w = t16_2.w * t16_8.x + t16_3.x;
    t16_8.x = t16_3.x + _Glossiness;
    t16_8.x = clamp(t16_8.x, 0.0, 1.0);
    t16_3.xyz = t16_8.xxx + (-_SpecColor.xyz);
    t16_3.xyz = t16_1.xxx * t16_3.xyz + _SpecColor.xyz;
    t16_0.xyz = t16_9.xyz * t16_3.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t26 = vs_TEXCOORD7;
    t26 = clamp(t26, 0.0, 1.0);
    t2.xyz = vec3(t26) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    t0.xyz = t0.xyz + t1.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_2 = t0.y * t0.y;
    t16_2 = t0.x * t0.x + (-t16_2);
    t16_0 = t0.yzzx * t0.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
highp float t24;
void main()
{
    vec3 txVec5 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_8 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_8, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_8 = dot(t16_2.xyz, t16_4.xyz);
    t16_8 = t16_8 + t16_8;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_8)) + t16_2.xyz;
    t16_8 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_8, 0.0);
    t16_8 = (-t16_3.x) + 1.0;
    t16_8 = t16_8 * t16_8;
    t16_8 = t16_8 * t16_8;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_15 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_15);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_21 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_21;
    t16_21 = t16_21 + _Glossiness;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    t16_1.xzw = vec3(t16_21) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_8) * t16_1.xzw + _SpecColor.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec4 t10_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
highp float t30;
void main()
{
    vec3 txVec5 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t16_28 = (-_Glossiness) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * _Glossiness + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = (-t16_28) + 1.0;
    t16_28 = log2(t16_28);
    t16_28 = t16_28 * 0.75;
    t16_28 = exp2(t16_28);
    t16_28 = t16_28 * 7.0;
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    t16_27 = log2(t16_27);
    t16_27 = 10.0 / t16_27;
    t16_27 = max(t16_27, -255.936996);
    t16_29 = t16_27 * t16_27 + 1.0;
    t16_27 = t16_27 * t16_27;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_12 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_12);
    t16_27 = t16_27 * t16_1.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_29;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_27) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_6.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_6.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_6.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_6.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_10 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_10, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_10 = dot(t16_2.xyz, t16_4.xyz);
    t16_10 = t16_10 + t16_10;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_10)) + t16_2.xyz;
    t16_10 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_10, 0.0);
    t16_10 = (-t16_3.x) + 1.0;
    t16_10 = t16_10 * t16_10;
    t16_10 = t16_10 * t16_10;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_28);
    t16_19 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_19);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_27;
    t16_27 = t16_27 + _Glossiness;
    t16_27 = clamp(t16_27, 0.0, 1.0);
    t16_1.xzw = vec3(t16_27) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_10) * t16_1.xzw + _SpecColor.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t1.xxxx + t3;
    t2 = t4 * t4 + t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.zzzz + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump float t16_8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_22;
mediump float t16_23;
highp float t24;
void main()
{
    vec3 txVec5 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_21 = inversesqrt(t16_21);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_21) * vs_TEXCOORD1.xyz;
    t16_21 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.00100000005);
    t16_21 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_21) * t16_1.xyz;
    t16_21 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_21, 0.0);
    t16_21 = t16_3.x * t16_3.x;
    t16_22 = (-_Glossiness) + 1.0;
    t16_23 = t16_22 * t16_22;
    t16_21 = t16_21 * _Glossiness + t16_23;
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_21 * t16_3.x + 9.99999975e-005;
    t16_21 = (-t16_22) + 1.0;
    t16_22 = log2(t16_22);
    t16_22 = t16_22 * 0.75;
    t16_22 = exp2(t16_22);
    t16_22 = t16_22 * 7.0;
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    t16_21 = log2(t16_21);
    t16_21 = 10.0 / t16_21;
    t16_21 = max(t16_21, -255.936996);
    t16_23 = t16_21 * t16_21 + 1.0;
    t16_21 = t16_21 * t16_21;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_10 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_10);
    t16_21 = t16_21 * t16_1.x;
    t16_21 = exp2(t16_21);
    t16_21 = t16_21 * t16_23;
    t16_3.x = t16_21 / t16_3.x;
    t16_21 = max(t16_3.x, 0.0);
    t16_21 = min(t16_21, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_21) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t16_4.w = 1.0;
    t16_6.x = dot(unity_SHAr, t16_4);
    t16_6.y = dot(unity_SHAg, t16_4);
    t16_6.z = dot(unity_SHAb, t16_4);
    t16_6.xyz = t16_6.xyz + vs_TEXCOORD5.xyz;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_21 = (-_OcclusionStrength) + 1.0;
    t16_21 = t10_3.x * _OcclusionStrength + t16_21;
    t16_6.xyz = vec3(t16_21) * t16_6.xyz;
    t16_5.xyz = t16_5.xyz * t16_6.xyz;
    t16_8 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_8, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_8 = dot(t16_2.xyz, t16_4.xyz);
    t16_8 = t16_8 + t16_8;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_8)) + t16_2.xyz;
    t16_8 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_8, 0.0);
    t16_8 = (-t16_3.x) + 1.0;
    t16_8 = t16_8 * t16_8;
    t16_8 = t16_8 * t16_8;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_22);
    t16_15 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_15);
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    t16_21 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_21;
    t16_21 = t16_21 + _Glossiness;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    t16_1.xzw = vec3(t16_21) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_8) * t16_1.xzw + _SpecColor.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec4 t10_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_10;
mediump float t16_12;
mediump float t16_19;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
highp float t30;
void main()
{
    vec3 txVec5 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.0);
    t16_27 = t16_3.x * t16_3.x;
    t16_28 = (-_Glossiness) + 1.0;
    t16_29 = t16_28 * t16_28;
    t16_27 = t16_27 * _Glossiness + t16_29;
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    t16_27 = (-t16_28) + 1.0;
    t16_28 = log2(t16_28);
    t16_28 = t16_28 * 0.75;
    t16_28 = exp2(t16_28);
    t16_28 = t16_28 * 7.0;
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    t16_27 = log2(t16_27);
    t16_27 = 10.0 / t16_27;
    t16_27 = max(t16_27, -255.936996);
    t16_29 = t16_27 * t16_27 + 1.0;
    t16_27 = t16_27 * t16_27;
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    t16_12 = max(t16_1.x, 0.0);
    t16_1.x = log2(t16_12);
    t16_27 = t16_27 * t16_1.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_29;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t16_1.x = max(_SpecColor.y, _SpecColor.x);
    t16_1.x = max(t16_1.x, _SpecColor.z);
    t16_1.x = (-t16_1.x) + 1.0;
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    t16_3 = t10_3 * _Color;
    t16_5.xyz = t16_1.xxx * t16_3.xyz;
    t16_5.xyz = t16_3.www * t16_5.xyz;
    t16_6.xyz = vec3(t16_27) * _SpecColor.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    t10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_6.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_6.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_6.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_6.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_10 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_10, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_10 = dot(t16_2.xyz, t16_4.xyz);
    t16_10 = t16_10 + t16_10;
    t16_5.xyz = t16_4.xyz * (-vec3(t16_10)) + t16_2.xyz;
    t16_10 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_10, 0.0);
    t16_10 = (-t16_3.x) + 1.0;
    t16_10 = t16_10 * t16_10;
    t16_10 = t16_10 * t16_10;
    t10_2 = textureLod(unity_SpecCube0, t16_5.xyz, t16_28);
    t16_19 = t10_2.w * unity_SpecCube0_HDR.x;
    t16_4.xyz = t10_2.xyz * vec3(t16_19);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = (-t16_1.x) + 1.0;
    SV_Target0.w = t16_3.w * t16_1.x + t16_27;
    t16_27 = t16_27 + _Glossiness;
    t16_27 = clamp(t16_27, 0.0, 1.0);
    t16_1.xzw = vec3(t16_27) + (-_SpecColor.xyz);
    t16_1.xyz = vec3(t16_10) * t16_1.xzw + _SpecColor.xyz;
    t16_0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t15 = dot(t1.xyz, t1.xyz);
    t15 = inversesqrt(t15);
    t1.xyz = vec3(t15) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_3.x = t1.y * t1.y;
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_2.xyz = vec3(t16_24) * t16_3.xyz;
    t16_0.w = dot(t16_2.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_5.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_5.y);
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_3.w) + 1.0;
    t16_16 = (-t16_0.y) + 1.0;
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    t16_16 = log2(t16_16);
    t16_16 = 10.0 / t16_16;
    t16_16 = max(t16_16, -255.936996);
    t16_24 = t16_16 * t16_16;
    t16_0.z = t16_16 * t16_16 + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_16 = t16_5.x * t16_5.x;
    t16_8.x = log2(t16_0.y);
    t16_8.x = t16_8.x * 0.75;
    t16_8.x = exp2(t16_8.x);
    t16_8.x = t16_8.x * 7.0;
    t16_16 = t16_16 * t10_3.w + t16_0.w;
    t16_16 = t16_16 * unity_LightGammaCorrectionConsts.z;
    t16_5.x = t16_16 * t16_5.x + 9.99999975e-005;
    t16_5.x = t16_0.x / t16_5.x;
    t16_0.x = max(t16_5.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_16 = (-t10_5.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_5.xxx + vec3(t16_16);
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_5.xyz;
    t16_16 = max(t10_3.y, t10_3.x);
    t16_16 = max(t10_3.z, t16_16);
    t16_16 = (-t16_16) + 1.0;
    t16_4.xyz = vec3(t16_16) * t16_4.xyz;
    t16_16 = (-t16_16) + 1.0;
    t16_16 = t16_16 + t10_3.w;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + vec3(t16_16);
    t16_0.xzw = t16_0.xxx * t10_3.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_2.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_2);
    t16_7.y = dot(unity_SHAg, t16_2);
    t16_7.z = dot(unity_SHAb, t16_2);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_5.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_5.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_5.xxx + t16_4.xyz;
    t16_4.x = dot(t16_2.xyz, (-t16_1.xyz));
    t16_5.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_5.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_2.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_2.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_8.x);
    t16_8.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_8.xxx;
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_4.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_2.y);
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_4.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_2.x * t16_2.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_4.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_18 = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + vec3(t16_18);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_18 = max(t10_4.y, t10_4.x);
    t16_18 = max(t10_4.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_5.xyz = vec3(t16_18) * t16_5.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_4.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_4.xyz + t16_5.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_3.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_5.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_30, 0.0);
    t16_30 = (-t16_2.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_5.xyz = vec3(t16_30) * t16_6.xyz + t10_4.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD2.w = 0.0;
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    t2.xyz = t2.xyz + t3.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t1.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    t21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t21) * t16_4.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD4.w = 0.0;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_2.xyz = vec3(t16_24) * t16_3.xyz;
    t16_0.w = dot(t16_2.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_5.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_5.y);
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_3.w) + 1.0;
    t16_16 = (-t16_0.y) + 1.0;
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    t16_16 = log2(t16_16);
    t16_16 = 10.0 / t16_16;
    t16_16 = max(t16_16, -255.936996);
    t16_24 = t16_16 * t16_16;
    t16_0.z = t16_16 * t16_16 + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_16 = t16_5.x * t16_5.x;
    t16_8.x = log2(t16_0.y);
    t16_8.x = t16_8.x * 0.75;
    t16_8.x = exp2(t16_8.x);
    t16_8.x = t16_8.x * 7.0;
    t16_16 = t16_16 * t10_3.w + t16_0.w;
    t16_16 = t16_16 * unity_LightGammaCorrectionConsts.z;
    t16_5.x = t16_16 * t16_5.x + 9.99999975e-005;
    t16_5.x = t16_0.x / t16_5.x;
    t16_0.x = max(t16_5.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_16 = (-t10_5.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_5.xxx + vec3(t16_16);
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_5.xyz;
    t16_16 = max(t10_3.y, t10_3.x);
    t16_16 = max(t10_3.z, t16_16);
    t16_16 = (-t16_16) + 1.0;
    t16_4.xyz = vec3(t16_16) * t16_4.xyz;
    t16_16 = (-t16_16) + 1.0;
    t16_16 = t16_16 + t10_3.w;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + vec3(t16_16);
    t16_0.xzw = t16_0.xxx * t10_3.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_2.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_2);
    t16_7.y = dot(unity_SHAg, t16_2);
    t16_7.z = dot(unity_SHAb, t16_2);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_5.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_5.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_5.xxx + t16_4.xyz;
    t16_4.x = dot(t16_2.xyz, (-t16_1.xyz));
    t16_5.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_5.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_2.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_2.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_8.x);
    t16_8.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_8.xxx;
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_4.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_2.y);
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_4.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_2.x * t16_2.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_4.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_18 = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + vec3(t16_18);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_18 = max(t10_4.y, t10_4.x);
    t16_18 = max(t10_4.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_5.xyz = vec3(t16_18) * t16_5.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_4.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_4.xyz + t16_5.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_3.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_5.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_30, 0.0);
    t16_30 = (-t16_2.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_5.xyz = vec3(t16_30) * t16_6.xyz + t10_4.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t15 = dot(t1.xyz, t1.xyz);
    t15 = inversesqrt(t15);
    t1.xyz = vec3(t15) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_3.x = t1.y * t1.y;
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_12;
mediump float t16_14;
mediump float t16_24;
mediump float t16_26;
mediump float t16_28;
void main()
{
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_3.xyz = vec3(t16_24) * t16_4.xyz;
    t16_24 = dot(t16_3.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_6.x = max(t16_1.x, 0.0);
    t16_14 = max(t16_24, 0.0);
    t16_24 = log2(t16_14);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_26 = (-t10_1.w) + 1.0;
    t16_4.x = (-t16_26) + 1.0;
    t16_4.x = t16_4.x * 0.967999995 + 0.0299999993;
    t16_4.x = log2(t16_4.x);
    t16_4.x = 10.0 / t16_4.x;
    t16_4.x = max(t16_4.x, -255.936996);
    t16_12 = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x + 1.0;
    t16_24 = t16_24 * t16_12;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_4.x;
    t16_4.x = t16_6.x * t16_6.x;
    t16_12 = t16_26 * t16_26;
    t16_26 = log2(t16_26);
    t16_26 = t16_26 * 0.75;
    t16_26 = exp2(t16_26);
    t16_26 = t16_26 * 7.0;
    t16_4.x = t16_4.x * t10_1.w + t16_12;
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    t16_6.x = t16_4.x * t16_6.x + 9.99999975e-005;
    t16_6.x = t16_24 / t16_6.x;
    t16_24 = max(t16_6.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_6.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_6.xyz * unity_ColorSpaceDouble.xyz;
    t10_6.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_28 = (-t10_6.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_6.xxx + vec3(t16_28);
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = max(t10_1.y, t10_1.x);
    t16_28 = max(t10_1.z, t16_28);
    t16_28 = (-t16_28) + 1.0;
    t16_4.xyz = vec3(t16_28) * t16_4.xyz;
    t16_28 = (-t16_28) + 1.0;
    t16_28 = t10_1.w + t16_28;
    t16_28 = clamp(t16_28, 0.0, 1.0);
    t16_5.xyz = (-t10_1.xyz) + vec3(t16_28);
    t16_7.xyz = vec3(t16_24) * t10_1.xyz + t16_4.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_3);
    t16_7.y = dot(unity_SHAg, t16_3);
    t16_7.z = dot(unity_SHAb, t16_3);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_6.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_6.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_6.x = max(t16_28, 0.0);
    t16_0.xyz = t16_0.xyz * t16_6.xxx + t16_4.xyz;
    t16_4.x = dot(t16_3.xyz, (-t16_2.xyz));
    t16_6.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_6.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_5.xyz + t10_1.xyz;
    t16_28 = dot(t16_2.xyz, t16_3.xyz);
    t16_28 = t16_28 + t16_28;
    t16_2.xyz = t16_3.xyz * (-vec3(t16_28)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_26);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_24) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_4.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_29;
mediump float t16_31;
void main()
{
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_1.x, 0.0);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_31 = (-t16_29) + 1.0;
    t16_31 = t16_31 * 0.967999995 + 0.0299999993;
    t16_31 = log2(t16_31);
    t16_31 = 10.0 / t16_31;
    t16_31 = max(t16_31, -255.936996);
    t16_5.x = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31 + 1.0;
    t16_27 = t16_27 * t16_5.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_31;
    t16_31 = t16_3.x * t16_3.x;
    t16_5.x = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_31 = t16_31 * t10_1.w + t16_5.x;
    t16_31 = t16_31 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_31 * t16_3.x + 9.99999975e-005;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_31 = (-t10_3.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_3.xxx + vec3(t16_31);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_3.xyz;
    t16_31 = max(t10_1.y, t10_1.x);
    t16_31 = max(t10_1.z, t16_31);
    t16_31 = (-t16_31) + 1.0;
    t16_5.xyz = vec3(t16_31) * t16_5.xyz;
    t16_31 = (-t16_31) + 1.0;
    t16_31 = t10_1.w + t16_31;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_6.xyz = (-t10_1.xyz) + vec3(t16_31);
    t16_7.xyz = vec3(t16_27) * t10_1.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_31, 0.0);
    t16_31 = (-t16_3.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD2.w = 0.0;
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    t2.xyz = t2.xyz + t3.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t1.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    t21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t21) * t16_4.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD4.w = 0.0;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_12;
mediump float t16_14;
mediump float t16_24;
mediump float t16_26;
mediump float t16_28;
void main()
{
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_3.xyz = vec3(t16_24) * t16_4.xyz;
    t16_24 = dot(t16_3.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_6.x = max(t16_1.x, 0.0);
    t16_14 = max(t16_24, 0.0);
    t16_24 = log2(t16_14);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_26 = (-t10_1.w) + 1.0;
    t16_4.x = (-t16_26) + 1.0;
    t16_4.x = t16_4.x * 0.967999995 + 0.0299999993;
    t16_4.x = log2(t16_4.x);
    t16_4.x = 10.0 / t16_4.x;
    t16_4.x = max(t16_4.x, -255.936996);
    t16_12 = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x + 1.0;
    t16_24 = t16_24 * t16_12;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_4.x;
    t16_4.x = t16_6.x * t16_6.x;
    t16_12 = t16_26 * t16_26;
    t16_26 = log2(t16_26);
    t16_26 = t16_26 * 0.75;
    t16_26 = exp2(t16_26);
    t16_26 = t16_26 * 7.0;
    t16_4.x = t16_4.x * t10_1.w + t16_12;
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    t16_6.x = t16_4.x * t16_6.x + 9.99999975e-005;
    t16_6.x = t16_24 / t16_6.x;
    t16_24 = max(t16_6.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_6.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_6.xyz * unity_ColorSpaceDouble.xyz;
    t10_6.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_28 = (-t10_6.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_6.xxx + vec3(t16_28);
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = max(t10_1.y, t10_1.x);
    t16_28 = max(t10_1.z, t16_28);
    t16_28 = (-t16_28) + 1.0;
    t16_4.xyz = vec3(t16_28) * t16_4.xyz;
    t16_28 = (-t16_28) + 1.0;
    t16_28 = t10_1.w + t16_28;
    t16_28 = clamp(t16_28, 0.0, 1.0);
    t16_5.xyz = (-t10_1.xyz) + vec3(t16_28);
    t16_7.xyz = vec3(t16_24) * t10_1.xyz + t16_4.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_3);
    t16_7.y = dot(unity_SHAg, t16_3);
    t16_7.z = dot(unity_SHAb, t16_3);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_6.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_6.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_6.x = max(t16_28, 0.0);
    t16_0.xyz = t16_0.xyz * t16_6.xxx + t16_4.xyz;
    t16_4.x = dot(t16_3.xyz, (-t16_2.xyz));
    t16_6.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_6.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_5.xyz + t10_1.xyz;
    t16_28 = dot(t16_2.xyz, t16_3.xyz);
    t16_28 = t16_28 + t16_28;
    t16_2.xyz = t16_3.xyz * (-vec3(t16_28)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_26);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_24) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_4.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_29;
mediump float t16_31;
void main()
{
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_1.x, 0.0);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_31 = (-t16_29) + 1.0;
    t16_31 = t16_31 * 0.967999995 + 0.0299999993;
    t16_31 = log2(t16_31);
    t16_31 = 10.0 / t16_31;
    t16_31 = max(t16_31, -255.936996);
    t16_5.x = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31 + 1.0;
    t16_27 = t16_27 * t16_5.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_31;
    t16_31 = t16_3.x * t16_3.x;
    t16_5.x = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_31 = t16_31 * t10_1.w + t16_5.x;
    t16_31 = t16_31 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_31 * t16_3.x + 9.99999975e-005;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_31 = (-t10_3.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_3.xxx + vec3(t16_31);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_3.xyz;
    t16_31 = max(t10_1.y, t10_1.x);
    t16_31 = max(t10_1.z, t16_31);
    t16_31 = (-t16_31) + 1.0;
    t16_5.xyz = vec3(t16_31) * t16_5.xyz;
    t16_31 = (-t16_31) + 1.0;
    t16_31 = t10_1.w + t16_31;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_6.xyz = (-t10_1.xyz) + vec3(t16_31);
    t16_7.xyz = vec3(t16_27) * t10_1.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_31, 0.0);
    t16_31 = (-t16_3.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t15 = dot(t1.xyz, t1.xyz);
    t15 = inversesqrt(t15);
    t1.xyz = vec3(t15) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_3.x = t1.y * t1.y;
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
highp float t29;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_2.xyz = vec3(t16_24) * t16_3.xyz;
    t16_0.w = dot(t16_2.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_5.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_5.y);
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_3.w) + 1.0;
    t16_16 = (-t16_0.y) + 1.0;
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    t16_16 = log2(t16_16);
    t16_16 = 10.0 / t16_16;
    t16_16 = max(t16_16, -255.936996);
    t16_24 = t16_16 * t16_16;
    t16_0.z = t16_16 * t16_16 + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_16 = t16_5.x * t16_5.x;
    t16_8.x = log2(t16_0.y);
    t16_8.x = t16_8.x * 0.75;
    t16_8.x = exp2(t16_8.x);
    t16_8.x = t16_8.x * 7.0;
    t16_16 = t16_16 * t10_3.w + t16_0.w;
    t16_16 = t16_16 * unity_LightGammaCorrectionConsts.z;
    t16_5.x = t16_16 * t16_5.x + 9.99999975e-005;
    t16_5.x = t16_0.x / t16_5.x;
    t16_0.x = max(t16_5.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_16 = (-t10_5.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_5.xxx + vec3(t16_16);
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_5.xyz;
    t16_16 = max(t10_3.y, t10_3.x);
    t16_16 = max(t10_3.z, t16_16);
    t16_16 = (-t16_16) + 1.0;
    t16_4.xyz = vec3(t16_16) * t16_4.xyz;
    t16_16 = (-t16_16) + 1.0;
    t16_16 = t16_16 + t10_3.w;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + vec3(t16_16);
    t16_0.xzw = t16_0.xxx * t10_3.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_2.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_2);
    t16_7.y = dot(unity_SHAg, t16_2);
    t16_7.z = dot(unity_SHAb, t16_2);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_5.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_5.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_5.xxx + t16_4.xyz;
    t16_4.x = dot(t16_2.xyz, (-t16_1.xyz));
    t16_5.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_5.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_2.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_2.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_8.x);
    t16_8.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_8.xxx;
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_4.xyz + t16_0.xzw;
    t16_5.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t5.xyz = vec3(t29) * t16_5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t5.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
highp float t29;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_2.y);
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_4.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_2.x * t16_2.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_4.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_18 = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + vec3(t16_18);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_18 = max(t10_4.y, t10_4.x);
    t16_18 = max(t10_4.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_5.xyz = vec3(t16_18) * t16_5.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_4.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_4.xyz + t16_5.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_3.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_5.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_30, 0.0);
    t16_30 = (-t16_2.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_5.xyz = vec3(t16_30) * t16_6.xyz + t10_4.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t2.xyz = vec3(t29) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD2.w = 0.0;
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    t2.xyz = t2.xyz + t3.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t1.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    t21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t21) * t16_4.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD4.w = 0.0;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_16;
mediump float t16_24;
mediump float t16_25;
mediump float t16_28;
highp float t29;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_8.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_8.xyz, t16_8.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_8.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_2.xyz = vec3(t16_24) * t16_3.xyz;
    t16_0.w = dot(t16_2.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_5.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_5.y);
    t10_3 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_3.w) + 1.0;
    t16_16 = (-t16_0.y) + 1.0;
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    t16_16 = log2(t16_16);
    t16_16 = 10.0 / t16_16;
    t16_16 = max(t16_16, -255.936996);
    t16_24 = t16_16 * t16_16;
    t16_0.z = t16_16 * t16_16 + 1.0;
    t16_0.x = t16_0.x * t16_24;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_16 = t16_5.x * t16_5.x;
    t16_8.x = log2(t16_0.y);
    t16_8.x = t16_8.x * 0.75;
    t16_8.x = exp2(t16_8.x);
    t16_8.x = t16_8.x * 7.0;
    t16_16 = t16_16 * t10_3.w + t16_0.w;
    t16_16 = t16_16 * unity_LightGammaCorrectionConsts.z;
    t16_5.x = t16_16 * t16_5.x + 9.99999975e-005;
    t16_5.x = t16_0.x / t16_5.x;
    t16_0.x = max(t16_5.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_16 = (-t10_5.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_5.xxx + vec3(t16_16);
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_5.xyz;
    t16_16 = max(t10_3.y, t10_3.x);
    t16_16 = max(t10_3.z, t16_16);
    t16_16 = (-t16_16) + 1.0;
    t16_4.xyz = vec3(t16_16) * t16_4.xyz;
    t16_16 = (-t16_16) + 1.0;
    t16_16 = t16_16 + t10_3.w;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    t16_6.xyz = (-t10_3.xyz) + vec3(t16_16);
    t16_0.xzw = t16_0.xxx * t10_3.xyz + t16_4.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_2.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_2);
    t16_7.y = dot(unity_SHAg, t16_2);
    t16_7.z = dot(unity_SHAb, t16_2);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_25 = (-_OcclusionStrength) + 1.0;
    t16_25 = t10_5.x * _OcclusionStrength + t16_25;
    t16_7.xyz = vec3(t16_25) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_5.x = max(t16_28, 0.0);
    t16_0.xzw = t16_0.xzw * t16_5.xxx + t16_4.xyz;
    t16_4.x = dot(t16_2.xyz, (-t16_1.xyz));
    t16_5.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_5.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_6.xyz + t10_3.xyz;
    t16_28 = dot(t16_1.xyz, t16_2.xyz);
    t16_28 = t16_28 + t16_28;
    t16_1.xyz = t16_2.xyz * (-vec3(t16_28)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_8.x);
    t16_8.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_8.xxx;
    t16_1.xyz = vec3(t16_25) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_4.xyz + t16_0.xzw;
    t16_5.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t5.xyz = vec3(t29) * t16_5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t5.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump vec3 t16_9;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
highp float t29;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_4.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_4.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_2.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_2.y);
    t10_4 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_0.y = (-t10_4.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_2.x * t16_2.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_4.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_2.x = t16_18 * t16_2.x + 9.99999975e-005;
    t16_2.x = t16_0.x / t16_2.x;
    t16_0.x = max(t16_2.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_2.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_2.xyz * unity_ColorSpaceDouble.xyz;
    t10_2.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_18 = (-t10_2.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_2.xxx + vec3(t16_18);
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_2.xyz;
    t16_18 = max(t10_4.y, t10_4.x);
    t16_18 = max(t10_4.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_5.xyz = vec3(t16_18) * t16_5.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_4.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_6.xyz = (-t10_4.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_4.xyz + t16_5.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_28 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_2.xyz * vec3(t16_28);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_28 = dot(t16_3.xyz, t10_8.xyz);
    t16_28 = t16_28 + 0.5;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_2.www;
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_2.x * _OcclusionStrength + t16_28;
    t16_7.xyz = vec3(t16_28) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_2.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_2.xxx + t16_5.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_2.x = max(t16_30, 0.0);
    t16_30 = (-t16_2.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_5.xyz = vec3(t16_30) * t16_6.xyz + t10_4.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_5.xyz + t16_0.xzw;
    t16_2.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    t2.xyz = vec3(t29) * t16_2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t15 = dot(t1.xyz, t1.xyz);
    t15 = inversesqrt(t15);
    t1.xyz = vec3(t15) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD4.w = 0.0;
    t16_3.x = t1.y * t1.y;
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_12;
mediump float t16_14;
mediump float t16_24;
mediump float t16_26;
mediump float t16_28;
highp float t30;
void main()
{
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_3.xyz = vec3(t16_24) * t16_4.xyz;
    t16_24 = dot(t16_3.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_6.x = max(t16_1.x, 0.0);
    t16_14 = max(t16_24, 0.0);
    t16_24 = log2(t16_14);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_26 = (-t10_1.w) + 1.0;
    t16_4.x = (-t16_26) + 1.0;
    t16_4.x = t16_4.x * 0.967999995 + 0.0299999993;
    t16_4.x = log2(t16_4.x);
    t16_4.x = 10.0 / t16_4.x;
    t16_4.x = max(t16_4.x, -255.936996);
    t16_12 = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x + 1.0;
    t16_24 = t16_24 * t16_12;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_4.x;
    t16_4.x = t16_6.x * t16_6.x;
    t16_12 = t16_26 * t16_26;
    t16_26 = log2(t16_26);
    t16_26 = t16_26 * 0.75;
    t16_26 = exp2(t16_26);
    t16_26 = t16_26 * 7.0;
    t16_4.x = t16_4.x * t10_1.w + t16_12;
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    t16_6.x = t16_4.x * t16_6.x + 9.99999975e-005;
    t16_6.x = t16_24 / t16_6.x;
    t16_24 = max(t16_6.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_6.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_6.xyz * unity_ColorSpaceDouble.xyz;
    t10_6.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_28 = (-t10_6.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_6.xxx + vec3(t16_28);
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = max(t10_1.y, t10_1.x);
    t16_28 = max(t10_1.z, t16_28);
    t16_28 = (-t16_28) + 1.0;
    t16_4.xyz = vec3(t16_28) * t16_4.xyz;
    t16_28 = (-t16_28) + 1.0;
    t16_28 = t10_1.w + t16_28;
    t16_28 = clamp(t16_28, 0.0, 1.0);
    t16_5.xyz = (-t10_1.xyz) + vec3(t16_28);
    t16_7.xyz = vec3(t16_24) * t10_1.xyz + t16_4.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_3);
    t16_7.y = dot(unity_SHAg, t16_3);
    t16_7.z = dot(unity_SHAb, t16_3);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_6.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_6.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_6.x = max(t16_28, 0.0);
    t16_0.xyz = t16_0.xyz * t16_6.xxx + t16_4.xyz;
    t16_4.x = dot(t16_3.xyz, (-t16_2.xyz));
    t16_6.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_6.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_5.xyz + t10_1.xyz;
    t16_28 = dot(t16_2.xyz, t16_3.xyz);
    t16_28 = t16_28 + t16_28;
    t16_2.xyz = t16_3.xyz * (-vec3(t16_28)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_26);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_24) * t16_2.xyz;
    t16_0.xyz = t16_2.xyz * t16_4.xyz + t16_0.xyz;
    t16_6.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t6.xyz = vec3(t30) * t16_6.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_29;
highp float t30;
mediump float t16_31;
void main()
{
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_1.x, 0.0);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_31 = (-t16_29) + 1.0;
    t16_31 = t16_31 * 0.967999995 + 0.0299999993;
    t16_31 = log2(t16_31);
    t16_31 = 10.0 / t16_31;
    t16_31 = max(t16_31, -255.936996);
    t16_5.x = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31 + 1.0;
    t16_27 = t16_27 * t16_5.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_31;
    t16_31 = t16_3.x * t16_3.x;
    t16_5.x = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_31 = t16_31 * t10_1.w + t16_5.x;
    t16_31 = t16_31 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_31 * t16_3.x + 9.99999975e-005;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_31 = (-t10_3.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_3.xxx + vec3(t16_31);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_3.xyz;
    t16_31 = max(t10_1.y, t10_1.x);
    t16_31 = max(t10_1.z, t16_31);
    t16_31 = (-t16_31) + 1.0;
    t16_5.xyz = vec3(t16_31) * t16_5.xyz;
    t16_31 = (-t16_31) + 1.0;
    t16_31 = t10_1.w + t16_31;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_6.xyz = (-t10_1.xyz) + vec3(t16_31);
    t16_7.xyz = vec3(t16_27) * t10_1.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_31, 0.0);
    t16_31 = (-t16_3.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    t16_0.xyz = t16_2.xyz * t16_5.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD2.w = 0.0;
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    t2.xyz = t2.xyz + t3.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t1.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    t21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t21) * t16_4.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD4.w = 0.0;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump float t16_12;
mediump float t16_14;
mediump float t16_24;
mediump float t16_26;
mediump float t16_28;
highp float t30;
void main()
{
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    t16_8 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_24) * vs_TEXCOORD1.xyz;
    t16_24 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_24, 0.00100000005);
    t16_24 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_24) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    t16_24 = inversesqrt(t16_24);
    t16_3.xyz = vec3(t16_24) * t16_4.xyz;
    t16_24 = dot(t16_3.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_6.x = max(t16_1.x, 0.0);
    t16_14 = max(t16_24, 0.0);
    t16_24 = log2(t16_14);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_26 = (-t10_1.w) + 1.0;
    t16_4.x = (-t16_26) + 1.0;
    t16_4.x = t16_4.x * 0.967999995 + 0.0299999993;
    t16_4.x = log2(t16_4.x);
    t16_4.x = 10.0 / t16_4.x;
    t16_4.x = max(t16_4.x, -255.936996);
    t16_12 = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x + 1.0;
    t16_24 = t16_24 * t16_12;
    t16_24 = exp2(t16_24);
    t16_24 = t16_24 * t16_4.x;
    t16_4.x = t16_6.x * t16_6.x;
    t16_12 = t16_26 * t16_26;
    t16_26 = log2(t16_26);
    t16_26 = t16_26 * 0.75;
    t16_26 = exp2(t16_26);
    t16_26 = t16_26 * 7.0;
    t16_4.x = t16_4.x * t10_1.w + t16_12;
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    t16_6.x = t16_4.x * t16_6.x + 9.99999975e-005;
    t16_6.x = t16_24 / t16_6.x;
    t16_24 = max(t16_6.x, 0.0);
    t16_24 = min(t16_24, 100.0);
    t10_6.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_4.xyz = t10_6.xyz * unity_ColorSpaceDouble.xyz;
    t10_6.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_28 = (-t10_6.x) + 1.0;
    t16_4.xyz = t16_4.xyz * t10_6.xxx + vec3(t16_28);
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    t16_4.xyz = t16_4.xyz * t16_6.xyz;
    t16_28 = max(t10_1.y, t10_1.x);
    t16_28 = max(t10_1.z, t16_28);
    t16_28 = (-t16_28) + 1.0;
    t16_4.xyz = vec3(t16_28) * t16_4.xyz;
    t16_28 = (-t16_28) + 1.0;
    t16_28 = t10_1.w + t16_28;
    t16_28 = clamp(t16_28, 0.0, 1.0);
    t16_5.xyz = (-t10_1.xyz) + vec3(t16_28);
    t16_7.xyz = vec3(t16_24) * t10_1.xyz + t16_4.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t16_3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t16_3);
    t16_7.y = dot(unity_SHAg, t16_3);
    t16_7.z = dot(unity_SHAb, t16_3);
    t16_7.xyz = t16_7.xyz + vs_TEXCOORD5.xyz;
    t10_6.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_24 = (-_OcclusionStrength) + 1.0;
    t16_24 = t10_6.x * _OcclusionStrength + t16_24;
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    t16_4.xyz = t16_4.xyz * t16_7.xyz;
    t16_28 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_6.x = max(t16_28, 0.0);
    t16_0.xyz = t16_0.xyz * t16_6.xxx + t16_4.xyz;
    t16_4.x = dot(t16_3.xyz, (-t16_2.xyz));
    t16_6.x = max(t16_4.x, 0.0);
    t16_4.x = (-t16_6.x) + 1.0;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.x = t16_4.x * t16_4.x;
    t16_4.xyz = t16_4.xxx * t16_5.xyz + t10_1.xyz;
    t16_28 = dot(t16_2.xyz, t16_3.xyz);
    t16_28 = t16_28 + t16_28;
    t16_2.xyz = t16_3.xyz * (-vec3(t16_28)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_26);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_24) * t16_2.xyz;
    t16_0.xyz = t16_2.xyz * t16_4.xyz + t16_0.xyz;
    t16_6.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t6.xyz = vec3(t30) * t16_6.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    vs_TEXCOORD2.xyz = t0.xyz;
    vs_TEXCOORD2.w = 0.0;
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    t1.xyz = t1.xyz + t2.xyz;
    t12 = dot(t1.xyz, t1.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * t1.xyz;
    t16_3.xyz = t0.yzx * t1.zxy;
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    vs_TEXCOORD4.xyz = t1.xyz;
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_3.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp vec4 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_29;
highp float t30;
mediump float t16_31;
void main()
{
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    t16_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_5.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_3.x = max(t16_1.x, 0.0);
    t16_12 = max(t16_27, 0.0);
    t16_27 = log2(t16_12);
    t10_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_31 = (-t16_29) + 1.0;
    t16_31 = t16_31 * 0.967999995 + 0.0299999993;
    t16_31 = log2(t16_31);
    t16_31 = 10.0 / t16_31;
    t16_31 = max(t16_31, -255.936996);
    t16_5.x = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31 + 1.0;
    t16_27 = t16_27 * t16_5.x;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_31;
    t16_31 = t16_3.x * t16_3.x;
    t16_5.x = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_31 = t16_31 * t10_1.w + t16_5.x;
    t16_31 = t16_31 * unity_LightGammaCorrectionConsts.z;
    t16_3.x = t16_31 * t16_3.x + 9.99999975e-005;
    t16_3.x = t16_27 / t16_3.x;
    t16_27 = max(t16_3.x, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_3.xyz = texture(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;
    t16_5.xyz = t10_3.xyz * unity_ColorSpaceDouble.xyz;
    t10_3.x = texture(_DetailMask, vs_TEXCOORD0.xy).w;
    t16_31 = (-t10_3.x) + 1.0;
    t16_5.xyz = t16_5.xyz * t10_3.xxx + vec3(t16_31);
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    t16_3.xyz = t10_3.xyz * _Color.xyz;
    t16_5.xyz = t16_5.xyz * t16_3.xyz;
    t16_31 = max(t10_1.y, t10_1.x);
    t16_31 = max(t10_1.z, t16_31);
    t16_31 = (-t16_31) + 1.0;
    t16_5.xyz = vec3(t16_31) * t16_5.xyz;
    t16_31 = (-t16_31) + 1.0;
    t16_31 = t10_1.w + t16_31;
    t16_31 = clamp(t16_31, 0.0, 1.0);
    t16_6.xyz = (-t10_1.xyz) + vec3(t16_31);
    t16_7.xyz = vec3(t16_27) * t10_1.xyz + t16_5.xyz;
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    t10_3 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_27 = t10_3.w * unity_DynamicLightmap_HDR.x;
    t16_7.xyz = t10_3.xyz * vec3(t16_27);
    t16_7.xyz = log2(t16_7.xyz);
    t16_7.xyz = t16_7.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_7.xyz = exp2(t16_7.xyz);
    t10_3 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_8.xyz = t10_3.xyz + vec3(-0.5, -0.5, -0.5);
    t16_27 = dot(t16_4.xyz, t10_8.xyz);
    t16_27 = t16_27 + 0.5;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_7.xyz = t16_7.xyz / t10_3.www;
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    t16_7.xyz = vec3(t16_27) * t16_7.xyz;
    t16_5.xyz = t16_5.xyz * t16_7.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_3.x = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_5.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_3.x = max(t16_31, 0.0);
    t16_31 = (-t16_3.x) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_5.xyz = vec3(t16_31) * t16_6.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    t16_0.xyz = t16_2.xyz * t16_5.xyz + t16_0.xyz;
    t16_3.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t30 = vs_TEXCOORD7;
    t30 = clamp(t30, 0.0, 1.0);
    t3.xyz = vec3(t30) * t16_3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
highp vec3 t6;
highp float t21;
mediump float t16_23;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t16_2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_2.x = inversesqrt(t16_2.x);
    t16_2.xyz = t16_2.xxx * in_NORMAL0.zxy;
    t16_23 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_3.xyz = vec3(t16_23) * in_TANGENT0.yzx;
    t16_4.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.zxy * t16_3.yzx + (-t16_4.xyz);
    t16_2.xyz = t16_2.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_2.xyz, t1.xyz);
    t1.w = dot(in_NORMAL0.xyz, t1.xyz);
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t6.x = _World2Object[0].x;
    t6.y = _World2Object[1].x;
    t6.z = _World2Object[2].x;
    t5.xyz = t6.xyz * in_NORMAL0.xxx + t5.xyz;
    t6.x = _World2Object[0].z;
    t6.y = _World2Object[1].z;
    t6.z = _World2Object[2].z;
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    t21 = dot(t5.xyz, t5.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t5.xyz;
    t16_2.xyz = t0.yzx * t1.zxy;
    t16_2.xyz = t1.yzx * t0.zxy + (-t16_2.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_2.xyz;
    vs_TEXCOORD4 = t1;
    t16_2.x = t1.y * t1.y;
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xy = vec2(t16_27) * t16_3.xy;
    t16_27 = t16_3.z * t16_27 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_27);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_27 = _Parallax * 0.5;
    t16_27 = t10_4.x * _Parallax + (-t16_27);
    t2 = vec4(t16_27) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_4.x * t16_4.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_5.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_18 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_13.xyz = texture(_MainTex, t2.xy).xyz;
    t16_13.xyz = t10_13.xyz * _Color.xyz;
    t16_18 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_18);
    t16_6.xyz = t16_13.xyz * t16_6.xyz;
    t16_18 = max(t10_5.y, t10_5.x);
    t16_18 = max(t10_5.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_6.xyz = vec3(t16_18) * t16_6.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_5.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_3.w = 1.0;
    t16_8.x = dot(unity_SHAr, t16_3);
    t16_8.y = dot(unity_SHAg, t16_3);
    t16_8.z = dot(unity_SHAb, t16_3);
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_4.x * _OcclusionStrength + t16_28;
    t16_8.xyz = vec3(t16_28) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_30, 0.0);
    t16_30 = (-t16_4.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_6.xyz = vec3(t16_30) * t16_7.xyz + t10_5.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
mediump float t16_25;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t2.xyz = t3.xyz * in_NORMAL0.xxx + t2.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t0.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t0.zxy + (-t16_4.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_4.xyz;
    t16_4.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * in_NORMAL0.zxy;
    t16_25 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_5.xyz = vec3(t16_25) * in_TANGENT0.yzx;
    t16_6.xyz = t16_4.xyz * t16_5.xyz;
    t16_4.xyz = t16_4.zxy * t16_5.yzx + (-t16_6.xyz);
    t16_4.xyz = t16_4.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_4.xyz, t1.xyz);
    t2.w = dot(in_NORMAL0.xyz, t1.xyz);
    vs_TEXCOORD4 = t2;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_20;
mediump float t16_30;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_10.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_10.xyz, t16_10.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_10.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xy = vec2(t16_30) * t16_3.xy;
    t16_30 = t16_3.z * t16_30 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_30);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_30 = _Parallax * 0.5;
    t16_30 = t10_4.x * _Parallax + (-t16_30);
    t2 = vec4(t16_30) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xyz = vec3(t16_30) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_20 = (-t16_0.y) + 1.0;
    t16_20 = t16_20 * 0.967999995 + 0.0299999993;
    t16_20 = log2(t16_20);
    t16_20 = 10.0 / t16_20;
    t16_20 = max(t16_20, -255.936996);
    t16_30 = t16_20 * t16_20;
    t16_0.z = t16_20 * t16_20 + 1.0;
    t16_0.x = t16_0.x * t16_30;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_20 = t16_4.x * t16_4.x;
    t16_10.x = log2(t16_0.y);
    t16_10.x = t16_10.x * 0.75;
    t16_10.x = exp2(t16_10.x);
    t16_10.x = t16_10.x * 7.0;
    t16_20 = t16_20 * t10_5.w + t16_0.w;
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_20 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_14.xyz = texture(_MainTex, t2.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_20 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_20);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_20 = max(t10_5.y, t10_5.x);
    t16_20 = max(t10_5.z, t16_20);
    t16_20 = (-t16_20) + 1.0;
    t16_6.xyz = vec3(t16_20) * t16_6.xyz;
    t16_20 = (-t16_20) + 1.0;
    t16_20 = t16_20 + t10_5.w;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_20);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_31 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_8.xyz = t10_2.xyz * vec3(t16_31);
    t16_8.xyz = log2(t16_8.xyz);
    t16_8.xyz = t16_8.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_8.xyz = exp2(t16_8.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_9.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_31 = dot(t16_3.xyz, t10_9.xyz);
    t16_31 = t16_31 + 0.5;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_8.xyz = t16_8.xyz / t10_2.www;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_31 = (-_OcclusionStrength) + 1.0;
    t16_31 = t10_4.x * _OcclusionStrength + t16_31;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_33 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_33, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_33 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_33, 0.0);
    t16_33 = (-t16_4.x) + 1.0;
    t16_33 = t16_33 * t16_33;
    t16_33 = t16_33 * t16_33;
    t16_6.xyz = vec3(t16_33) * t16_7.xyz + t10_5.xyz;
    t16_33 = dot(t16_1.xyz, t16_3.xyz);
    t16_33 = t16_33 + t16_33;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_33)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_10.x);
    t16_10.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_10.xxx;
    t16_1.xyz = vec3(t16_31) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump vec3 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
highp vec3 t7;
mediump vec3 t16_8;
highp float t27;
mediump float t16_30;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t27 = dot(t1.xyz, t1.xyz);
    t27 = inversesqrt(t27);
    t1.xyz = vec3(t27) * t1.xyz;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t1.w = dot(in_TANGENT0.xyz, t2.xyz);
    vs_TEXCOORD2 = t1;
    t16_3.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_3.x = inversesqrt(t16_3.x);
    t16_3.xyz = t16_3.xxx * in_NORMAL0.zxy;
    t16_30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_4.xyz = vec3(t16_30) * in_TANGENT0.yzx;
    t16_5.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.zxy * t16_4.yzx + (-t16_5.xyz);
    t16_3.xyz = t16_3.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_3.xyz, t2.xyz);
    t2.w = dot(in_NORMAL0.xyz, t2.xyz);
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    t7.x = _World2Object[0].x;
    t7.y = _World2Object[1].x;
    t7.z = _World2Object[2].x;
    t6.xyz = t7.xyz * in_NORMAL0.xxx + t6.xyz;
    t7.x = _World2Object[0].z;
    t7.y = _World2Object[1].z;
    t7.z = _World2Object[2].z;
    t6.xyz = t7.xyz * in_NORMAL0.zzz + t6.xyz;
    t27 = dot(t6.xyz, t6.xyz);
    t27 = inversesqrt(t27);
    t2.xyz = vec3(t27) * t6.xyz;
    t16_3.xyz = t1.yzx * t2.zxy;
    t16_3.xyz = t2.yzx * t1.zxy + (-t16_3.xyz);
    t27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t27) * t16_3.xyz;
    vs_TEXCOORD4 = t2;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_8.x = dot(unity_SHBr, t16_1);
    t16_8.y = dot(unity_SHBg, t16_1);
    t16_8.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_8.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_30;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xy = vec2(t16_27) * t16_3.xy;
    t16_27 = t16_3.z * t16_27 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_27);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_27 = _Parallax * 0.5;
    t16_27 = t10_4.x * _Parallax + (-t16_27);
    t2 = vec4(t16_27) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_4.x * t16_4.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_5.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_18 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_13.xyz = texture(_MainTex, t2.xy).xyz;
    t16_13.xyz = t10_13.xyz * _Color.xyz;
    t16_18 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_18);
    t16_6.xyz = t16_13.xyz * t16_6.xyz;
    t16_18 = max(t10_5.y, t10_5.x);
    t16_18 = max(t10_5.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_6.xyz = vec3(t16_18) * t16_6.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_5.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_3.w = 1.0;
    t16_8.x = dot(unity_SHAr, t16_3);
    t16_8.y = dot(unity_SHAg, t16_3);
    t16_8.z = dot(unity_SHAb, t16_3);
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_4.x * _OcclusionStrength + t16_28;
    t16_8.xyz = vec3(t16_28) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_30, 0.0);
    t16_30 = (-t16_4.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_6.xyz = vec3(t16_30) * t16_7.xyz + t10_5.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
mediump float t16_25;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t2.xyz = t3.xyz * in_NORMAL0.xxx + t2.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t0.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t0.zxy + (-t16_4.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_4.xyz;
    t16_4.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * in_NORMAL0.zxy;
    t16_25 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_5.xyz = vec3(t16_25) * in_TANGENT0.yzx;
    t16_6.xyz = t16_4.xyz * t16_5.xyz;
    t16_4.xyz = t16_4.zxy * t16_5.yzx + (-t16_6.xyz);
    t16_4.xyz = t16_4.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_4.xyz, t1.xyz);
    t2.w = dot(in_NORMAL0.xyz, t1.xyz);
    vs_TEXCOORD4 = t2;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_20;
mediump float t16_30;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_10.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_10.xyz, t16_10.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_10.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xy = vec2(t16_30) * t16_3.xy;
    t16_30 = t16_3.z * t16_30 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_30);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_30 = _Parallax * 0.5;
    t16_30 = t10_4.x * _Parallax + (-t16_30);
    t2 = vec4(t16_30) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xyz = vec3(t16_30) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_20 = (-t16_0.y) + 1.0;
    t16_20 = t16_20 * 0.967999995 + 0.0299999993;
    t16_20 = log2(t16_20);
    t16_20 = 10.0 / t16_20;
    t16_20 = max(t16_20, -255.936996);
    t16_30 = t16_20 * t16_20;
    t16_0.z = t16_20 * t16_20 + 1.0;
    t16_0.x = t16_0.x * t16_30;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_20 = t16_4.x * t16_4.x;
    t16_10.x = log2(t16_0.y);
    t16_10.x = t16_10.x * 0.75;
    t16_10.x = exp2(t16_10.x);
    t16_10.x = t16_10.x * 7.0;
    t16_20 = t16_20 * t10_5.w + t16_0.w;
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_20 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_14.xyz = texture(_MainTex, t2.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_20 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_20);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_20 = max(t10_5.y, t10_5.x);
    t16_20 = max(t10_5.z, t16_20);
    t16_20 = (-t16_20) + 1.0;
    t16_6.xyz = vec3(t16_20) * t16_6.xyz;
    t16_20 = (-t16_20) + 1.0;
    t16_20 = t16_20 + t10_5.w;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_20);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_31 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_8.xyz = t10_2.xyz * vec3(t16_31);
    t16_8.xyz = log2(t16_8.xyz);
    t16_8.xyz = t16_8.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_8.xyz = exp2(t16_8.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_9.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_31 = dot(t16_3.xyz, t10_9.xyz);
    t16_31 = t16_31 + 0.5;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_8.xyz = t16_8.xyz / t10_2.www;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_31 = (-_OcclusionStrength) + 1.0;
    t16_31 = t10_4.x * _OcclusionStrength + t16_31;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_33 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_33, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_33 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_33, 0.0);
    t16_33 = (-t16_4.x) + 1.0;
    t16_33 = t16_33 * t16_33;
    t16_33 = t16_33 * t16_33;
    t16_6.xyz = vec3(t16_33) * t16_7.xyz + t10_5.xyz;
    t16_33 = dot(t16_1.xyz, t16_3.xyz);
    t16_33 = t16_33 + t16_33;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_33)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_10.x);
    t16_10.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_10.xxx;
    t16_1.xyz = vec3(t16_31) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
highp vec3 t6;
highp float t21;
mediump float t16_23;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t16_2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_2.x = inversesqrt(t16_2.x);
    t16_2.xyz = t16_2.xxx * in_NORMAL0.zxy;
    t16_23 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_3.xyz = vec3(t16_23) * in_TANGENT0.yzx;
    t16_4.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.zxy * t16_3.yzx + (-t16_4.xyz);
    t16_2.xyz = t16_2.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_2.xyz, t1.xyz);
    t1.w = dot(in_NORMAL0.xyz, t1.xyz);
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t6.x = _World2Object[0].x;
    t6.y = _World2Object[1].x;
    t6.z = _World2Object[2].x;
    t5.xyz = t6.xyz * in_NORMAL0.xxx + t5.xyz;
    t6.x = _World2Object[0].z;
    t6.y = _World2Object[1].z;
    t6.z = _World2Object[2].z;
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    t21 = dot(t5.xyz, t5.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t5.xyz;
    t16_2.xyz = t0.yzx * t1.zxy;
    t16_2.xyz = t1.yzx * t0.zxy + (-t16_2.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_2.xyz;
    vs_TEXCOORD4 = t1;
    t16_2.x = t1.y * t1.y;
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
mediump vec4 t16_4;
mediump float t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_9;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_15;
mediump float t16_27;
mediump float t16_29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    vec3 txVec8 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_4.x = vs_TEXCOORD2.w;
    t16_4.y = vs_TEXCOORD3.w;
    t16_4.z = vs_TEXCOORD4.w;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xy = vec2(t16_27) * t16_4.xy;
    t16_27 = t16_4.z * t16_27 + 0.419999987;
    t16_3 = t16_4.xyxy / vec4(t16_27);
    t10_5.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_27 = _Parallax * 0.5;
    t16_27 = t10_5.x * _Parallax + (-t16_27);
    t3 = vec4(t16_27) * t16_3 + vs_TEXCOORD0;
    t10_5.xyz = texture(_BumpMap, t3.xy).xyz;
    t16_4.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_6.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_6.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_5 = max(t16_1.x, 0.0);
    t16_14.x = max(t16_27, 0.0);
    t16_27 = log2(t16_14.x);
    t10_1 = texture(_SpecGlossMap, t3.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_6.x = (-t16_29) + 1.0;
    t16_6.x = t16_6.x * 0.967999995 + 0.0299999993;
    t16_6.x = log2(t16_6.x);
    t16_6.x = 10.0 / t16_6.x;
    t16_6.x = max(t16_6.x, -255.936996);
    t16_15 = t16_6.x * t16_6.x;
    t16_6.x = t16_6.x * t16_6.x + 1.0;
    t16_27 = t16_27 * t16_15;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_6.x;
    t16_6.x = t16_5 * t16_5;
    t16_15 = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_6.x = t16_6.x * t10_1.w + t16_15;
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    t16_5 = t16_6.x * t16_5 + 9.99999975e-005;
    t16_5 = t16_27 / t16_5;
    t16_27 = max(t16_5, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, t3.zw).xyz;
    t16_6.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, t3.xy).w;
    t10_14.xyz = texture(_MainTex, t3.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_33 = (-t10_5.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_5.xxx + vec3(t16_33);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_33 = max(t10_1.y, t10_1.x);
    t16_33 = max(t10_1.z, t16_33);
    t16_33 = (-t16_33) + 1.0;
    t16_6.xyz = vec3(t16_33) * t16_6.xyz;
    t16_33 = (-t16_33) + 1.0;
    t16_33 = t10_1.w + t16_33;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_7.xyz = (-t10_1.xyz) + vec3(t16_33);
    t16_8.xyz = vec3(t16_27) * t10_1.xyz + t16_6.xyz;
    t16_0.xyz = t16_0.xyz * t16_8.xyz;
    t16_4.w = 1.0;
    t16_8.x = dot(unity_SHAr, t16_4);
    t16_8.y = dot(unity_SHAg, t16_4);
    t16_8.z = dot(unity_SHAb, t16_4);
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_5.x * _OcclusionStrength + t16_27;
    t16_8.xyz = vec3(t16_27) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_5 = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * vec3(t16_5) + t16_6.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_5 = max(t16_31, 0.0);
    t16_31 = (-t16_5) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_6.xyz = vec3(t16_31) * t16_7.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
mediump float t16_25;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t2.xyz = t3.xyz * in_NORMAL0.xxx + t2.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t0.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t0.zxy + (-t16_4.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_4.xyz;
    t16_4.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * in_NORMAL0.zxy;
    t16_25 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_5.xyz = vec3(t16_25) * in_TANGENT0.yzx;
    t16_6.xyz = t16_4.xyz * t16_5.xyz;
    t16_4.xyz = t16_4.zxy * t16_5.yzx + (-t16_6.xyz);
    t16_4.xyz = t16_4.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_4.xyz, t1.xyz);
    t2.w = dot(in_NORMAL0.xyz, t1.xyz);
    vs_TEXCOORD4 = t2;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_20;
mediump float t16_30;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_10.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_10.xyz, t16_10.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_10.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xy = vec2(t16_30) * t16_3.xy;
    t16_30 = t16_3.z * t16_30 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_30);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_30 = _Parallax * 0.5;
    t16_30 = t10_4.x * _Parallax + (-t16_30);
    t2 = vec4(t16_30) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xyz = vec3(t16_30) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_20 = (-t16_0.y) + 1.0;
    t16_20 = t16_20 * 0.967999995 + 0.0299999993;
    t16_20 = log2(t16_20);
    t16_20 = 10.0 / t16_20;
    t16_20 = max(t16_20, -255.936996);
    t16_30 = t16_20 * t16_20;
    t16_0.z = t16_20 * t16_20 + 1.0;
    t16_0.x = t16_0.x * t16_30;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_20 = t16_4.x * t16_4.x;
    t16_10.x = log2(t16_0.y);
    t16_10.x = t16_10.x * 0.75;
    t16_10.x = exp2(t16_10.x);
    t16_10.x = t16_10.x * 7.0;
    t16_20 = t16_20 * t10_5.w + t16_0.w;
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_20 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_14.xyz = texture(_MainTex, t2.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_20 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_20);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_20 = max(t10_5.y, t10_5.x);
    t16_20 = max(t10_5.z, t16_20);
    t16_20 = (-t16_20) + 1.0;
    t16_6.xyz = vec3(t16_20) * t16_6.xyz;
    t16_20 = (-t16_20) + 1.0;
    t16_20 = t16_20 + t10_5.w;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_20);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    vec3 txVec8 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_31 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_31 = t16_31 * t16_33 + _LightShadowData.x;
    t16_8.xyz = vec3(t16_31) * _LightColor0.xyz;
    t16_0.xzw = t16_0.xzw * t16_8.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_31 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_8.xyz = t10_2.xyz * vec3(t16_31);
    t16_8.xyz = log2(t16_8.xyz);
    t16_8.xyz = t16_8.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_8.xyz = exp2(t16_8.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_9.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_31 = dot(t16_3.xyz, t10_9.xyz);
    t16_31 = t16_31 + 0.5;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_8.xyz = t16_8.xyz / t10_2.www;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_31 = (-_OcclusionStrength) + 1.0;
    t16_31 = t10_4.x * _OcclusionStrength + t16_31;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_33 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_33, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_33 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_33, 0.0);
    t16_33 = (-t16_4.x) + 1.0;
    t16_33 = t16_33 * t16_33;
    t16_33 = t16_33 * t16_33;
    t16_6.xyz = vec3(t16_33) * t16_7.xyz + t10_5.xyz;
    t16_33 = dot(t16_1.xyz, t16_3.xyz);
    t16_33 = t16_33 + t16_33;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_33)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_10.x);
    t16_10.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_10.xxx;
    t16_1.xyz = vec3(t16_31) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump vec3 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
highp vec3 t7;
mediump vec3 t16_8;
highp float t27;
mediump float t16_30;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t1.xyz;
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    t27 = dot(t1.xyz, t1.xyz);
    t27 = inversesqrt(t27);
    t1.xyz = vec3(t27) * t1.xyz;
    t2.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t2.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t2.xyz;
    t2.xyz = t2.xyz + _World2Object[3].xyz;
    t2.xyz = t2.xyz + (-in_POSITION0.xyz);
    t1.w = dot(in_TANGENT0.xyz, t2.xyz);
    vs_TEXCOORD2 = t1;
    t16_3.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_3.x = inversesqrt(t16_3.x);
    t16_3.xyz = t16_3.xxx * in_NORMAL0.zxy;
    t16_30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_4.xyz = vec3(t16_30) * in_TANGENT0.yzx;
    t16_5.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.zxy * t16_4.yzx + (-t16_5.xyz);
    t16_3.xyz = t16_3.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_3.xyz, t2.xyz);
    t2.w = dot(in_NORMAL0.xyz, t2.xyz);
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    t7.x = _World2Object[0].x;
    t7.y = _World2Object[1].x;
    t7.z = _World2Object[2].x;
    t6.xyz = t7.xyz * in_NORMAL0.xxx + t6.xyz;
    t7.x = _World2Object[0].z;
    t7.y = _World2Object[1].z;
    t7.z = _World2Object[2].z;
    t6.xyz = t7.xyz * in_NORMAL0.zzz + t6.xyz;
    t27 = dot(t6.xyz, t6.xyz);
    t27 = inversesqrt(t27);
    t2.xyz = vec3(t27) * t6.xyz;
    t16_3.xyz = t1.yzx * t2.zxy;
    t16_3.xyz = t2.yzx * t1.zxy + (-t16_3.xyz);
    t27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(t27) * t16_3.xyz;
    vs_TEXCOORD4 = t2;
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t1 = t4 * t4 + t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.zzzz + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_8.x = dot(unity_SHBr, t16_1);
    t16_8.y = dot(unity_SHBg, t16_1);
    t16_8.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_8.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD5.w = 0.0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
mediump vec4 t16_4;
mediump float t16_5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_9;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_15;
mediump float t16_27;
mediump float t16_29;
mediump float t16_31;
mediump float t16_33;
void main()
{
    vec3 txVec8 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    t16_9 = (-_LightShadowData.x) + 1.0;
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    t16_3.x = max(t16_27, 0.00100000005);
    t16_27 = inversesqrt(t16_3.x);
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    t16_4.x = vs_TEXCOORD2.w;
    t16_4.y = vs_TEXCOORD3.w;
    t16_4.z = vs_TEXCOORD4.w;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xy = vec2(t16_27) * t16_4.xy;
    t16_27 = t16_4.z * t16_27 + 0.419999987;
    t16_3 = t16_4.xyxy / vec4(t16_27);
    t10_5.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_27 = _Parallax * 0.5;
    t16_27 = t10_5.x * _Parallax + (-t16_27);
    t3 = vec4(t16_27) * t16_3 + vs_TEXCOORD0;
    t10_5.xyz = texture(_BumpMap, t3.xy).xyz;
    t16_4.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_6.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    t16_4.xyw = vs_TEXCOORD2.xyz * t16_4.xxx + t16_6.xyz;
    t16_4.xyz = vs_TEXCOORD4.xyz * t16_4.zzz + t16_4.xyw;
    t16_27 = dot(t16_4.xyz, t16_4.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    t16_27 = dot(t16_4.xyz, t16_1.xyz);
    t16_1.x = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    t16_5 = max(t16_1.x, 0.0);
    t16_14.x = max(t16_27, 0.0);
    t16_27 = log2(t16_14.x);
    t10_1 = texture(_SpecGlossMap, t3.xy);
    t16_29 = (-t10_1.w) + 1.0;
    t16_6.x = (-t16_29) + 1.0;
    t16_6.x = t16_6.x * 0.967999995 + 0.0299999993;
    t16_6.x = log2(t16_6.x);
    t16_6.x = 10.0 / t16_6.x;
    t16_6.x = max(t16_6.x, -255.936996);
    t16_15 = t16_6.x * t16_6.x;
    t16_6.x = t16_6.x * t16_6.x + 1.0;
    t16_27 = t16_27 * t16_15;
    t16_27 = exp2(t16_27);
    t16_27 = t16_27 * t16_6.x;
    t16_6.x = t16_5 * t16_5;
    t16_15 = t16_29 * t16_29;
    t16_29 = log2(t16_29);
    t16_29 = t16_29 * 0.75;
    t16_29 = exp2(t16_29);
    t16_29 = t16_29 * 7.0;
    t16_6.x = t16_6.x * t10_1.w + t16_15;
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    t16_5 = t16_6.x * t16_5 + 9.99999975e-005;
    t16_5 = t16_27 / t16_5;
    t16_27 = max(t16_5, 0.0);
    t16_27 = min(t16_27, 100.0);
    t10_5.xyz = texture(_DetailAlbedoMap, t3.zw).xyz;
    t16_6.xyz = t10_5.xyz * unity_ColorSpaceDouble.xyz;
    t10_5.x = texture(_DetailMask, t3.xy).w;
    t10_14.xyz = texture(_MainTex, t3.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_33 = (-t10_5.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_5.xxx + vec3(t16_33);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_33 = max(t10_1.y, t10_1.x);
    t16_33 = max(t10_1.z, t16_33);
    t16_33 = (-t16_33) + 1.0;
    t16_6.xyz = vec3(t16_33) * t16_6.xyz;
    t16_33 = (-t16_33) + 1.0;
    t16_33 = t10_1.w + t16_33;
    t16_33 = clamp(t16_33, 0.0, 1.0);
    t16_7.xyz = (-t10_1.xyz) + vec3(t16_33);
    t16_8.xyz = vec3(t16_27) * t10_1.xyz + t16_6.xyz;
    t16_0.xyz = t16_0.xyz * t16_8.xyz;
    t16_4.w = 1.0;
    t16_8.x = dot(unity_SHAr, t16_4);
    t16_8.y = dot(unity_SHAg, t16_4);
    t16_8.z = dot(unity_SHAb, t16_4);
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    t10_5.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_27 = (-_OcclusionStrength) + 1.0;
    t16_27 = t10_5.x * _OcclusionStrength + t16_27;
    t16_8.xyz = vec3(t16_27) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_31 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_5 = max(t16_31, 0.0);
    t16_0.xyz = t16_0.xyz * vec3(t16_5) + t16_6.xyz;
    t16_31 = dot(t16_4.xyz, (-t16_2.xyz));
    t16_5 = max(t16_31, 0.0);
    t16_31 = (-t16_5) + 1.0;
    t16_31 = t16_31 * t16_31;
    t16_31 = t16_31 * t16_31;
    t16_6.xyz = vec3(t16_31) * t16_7.xyz + t10_1.xyz;
    t16_31 = dot(t16_2.xyz, t16_4.xyz);
    t16_31 = t16_31 + t16_31;
    t16_2.xyz = t16_4.xyz * (-vec3(t16_31)) + t16_2.xyz;
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_29);
    t16_2.x = t10_1.w * unity_SpecCube0_HDR.x;
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    t16_2.xyz = vec3(t16_27) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
mediump float t16_25;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t2.xyz = t3.xyz * in_NORMAL0.xxx + t2.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    t21 = dot(t2.xyz, t2.xyz);
    t21 = inversesqrt(t21);
    t2.xyz = vec3(t21) * t2.xyz;
    t16_4.xyz = t0.yzx * t2.zxy;
    t16_4.xyz = t2.yzx * t0.zxy + (-t16_4.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_4.xyz;
    t16_4.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_4.x = inversesqrt(t16_4.x);
    t16_4.xyz = t16_4.xxx * in_NORMAL0.zxy;
    t16_25 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_25 = inversesqrt(t16_25);
    t16_5.xyz = vec3(t16_25) * in_TANGENT0.yzx;
    t16_6.xyz = t16_4.xyz * t16_5.xyz;
    t16_4.xyz = t16_4.zxy * t16_5.yzx + (-t16_6.xyz);
    t16_4.xyz = t16_4.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_4.xyz, t1.xyz);
    t2.w = dot(in_NORMAL0.xyz, t1.xyz);
    vs_TEXCOORD4 = t2;
    t0.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.zw = t0.xy;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2D unity_DynamicDirectionality;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec2 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
lowp vec3 t10_9;
mediump vec3 t16_10;
mediump vec3 t16_14;
lowp vec3 t10_14;
mediump float t16_20;
mediump float t16_30;
mediump float t16_31;
mediump float t16_33;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_10.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_10.xyz, t16_10.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_10.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xy = vec2(t16_30) * t16_3.xy;
    t16_30 = t16_3.z * t16_30 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_30);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_30 = _Parallax * 0.5;
    t16_30 = t10_4.x * _Parallax + (-t16_30);
    t2 = vec4(t16_30) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_30 = dot(t16_3.xyz, t16_3.xyz);
    t16_30 = inversesqrt(t16_30);
    t16_3.xyz = vec3(t16_30) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_20 = (-t16_0.y) + 1.0;
    t16_20 = t16_20 * 0.967999995 + 0.0299999993;
    t16_20 = log2(t16_20);
    t16_20 = 10.0 / t16_20;
    t16_20 = max(t16_20, -255.936996);
    t16_30 = t16_20 * t16_20;
    t16_0.z = t16_20 * t16_20 + 1.0;
    t16_0.x = t16_0.x * t16_30;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_20 = t16_4.x * t16_4.x;
    t16_10.x = log2(t16_0.y);
    t16_10.x = t16_10.x * 0.75;
    t16_10.x = exp2(t16_10.x);
    t16_10.x = t16_10.x * 7.0;
    t16_20 = t16_20 * t10_5.w + t16_0.w;
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_20 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_14.xyz = texture(_MainTex, t2.xy).xyz;
    t16_14.xyz = t10_14.xyz * _Color.xyz;
    t16_20 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_20);
    t16_6.xyz = t16_14.xyz * t16_6.xyz;
    t16_20 = max(t10_5.y, t10_5.x);
    t16_20 = max(t10_5.z, t16_20);
    t16_20 = (-t16_20) + 1.0;
    t16_6.xyz = vec3(t16_20) * t16_6.xyz;
    t16_20 = (-t16_20) + 1.0;
    t16_20 = t16_20 + t10_5.w;
    t16_20 = clamp(t16_20, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_20);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    vec3 txVec8 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_31 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    t16_33 = (-_LightShadowData.x) + 1.0;
    t16_31 = t16_31 * t16_33 + _LightShadowData.x;
    t16_8.xyz = vec3(t16_31) * _LightColor0.xyz;
    t16_0.xzw = t16_0.xzw * t16_8.xyz;
    t10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    t16_31 = t10_2.w * unity_DynamicLightmap_HDR.x;
    t16_8.xyz = t10_2.xyz * vec3(t16_31);
    t16_8.xyz = log2(t16_8.xyz);
    t16_8.xyz = t16_8.xyz * unity_DynamicLightmap_HDR.yyy;
    t16_8.xyz = exp2(t16_8.xyz);
    t10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    t10_9.xyz = t10_2.xyz + vec3(-0.5, -0.5, -0.5);
    t16_31 = dot(t16_3.xyz, t10_9.xyz);
    t16_31 = t16_31 + 0.5;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_8.xyz = t16_8.xyz / t10_2.www;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_31 = (-_OcclusionStrength) + 1.0;
    t16_31 = t10_4.x * _OcclusionStrength + t16_31;
    t16_8.xyz = vec3(t16_31) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_33 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_33, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_33 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_33, 0.0);
    t16_33 = (-t16_4.x) + 1.0;
    t16_33 = t16_33 * t16_33;
    t16_33 = t16_33 * t16_33;
    t16_6.xyz = vec3(t16_33) * t16_7.xyz + t10_5.xyz;
    t16_33 = dot(t16_1.xyz, t16_3.xyz);
    t16_33 = t16_33 + t16_33;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_33)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_10.x);
    t16_10.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_10.xxx;
    t16_1.xyz = vec3(t16_31) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
highp vec3 t6;
highp float t21;
mediump float t16_23;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    gl_Position = t0;
    t0.x = t0.z * unity_FogParams.x;
    t0.x = t0.x * (-t0.x);
    vs_TEXCOORD7 = exp2(t0.x);
    tb0 = _UVSec==0.0;
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    vs_TEXCOORD1.xyz = t0.xyz;
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    t1.xyz = t1.xyz + (-in_POSITION0.xyz);
    t0.w = dot(in_TANGENT0.xyz, t1.xyz);
    vs_TEXCOORD2 = t0;
    t16_2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    t16_2.x = inversesqrt(t16_2.x);
    t16_2.xyz = t16_2.xxx * in_NORMAL0.zxy;
    t16_23 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    t16_23 = inversesqrt(t16_23);
    t16_3.xyz = vec3(t16_23) * in_TANGENT0.yzx;
    t16_4.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.zxy * t16_3.yzx + (-t16_4.xyz);
    t16_2.xyz = t16_2.xyz * in_TANGENT0.www;
    vs_TEXCOORD3.w = dot(t16_2.xyz, t1.xyz);
    t1.w = dot(in_NORMAL0.xyz, t1.xyz);
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t6.x = _World2Object[0].x;
    t6.y = _World2Object[1].x;
    t6.z = _World2Object[2].x;
    t5.xyz = t6.xyz * in_NORMAL0.xxx + t5.xyz;
    t6.x = _World2Object[0].z;
    t6.y = _World2Object[1].z;
    t6.z = _World2Object[2].z;
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    t21 = dot(t5.xyz, t5.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t5.xyz;
    t16_2.xyz = t0.yzx * t1.zxy;
    t16_2.xyz = t1.yzx * t0.zxy + (-t16_2.xyz);
    t0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = t0.xxx * t16_2.xyz;
    vs_TEXCOORD4 = t1;
    t16_2.x = t1.y * t1.y;
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_3.x = dot(unity_SHBr, t16_0);
    t16_3.y = dot(unity_SHBg, t16_0);
    t16_3.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _ParallaxMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _DetailAlbedoMap;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec4 t16_3;
highp vec3 t4;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
lowp vec4 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_18;
mediump float t16_27;
mediump float t16_28;
mediump float t16_30;
highp float t31;
void main()
{
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    t16_0.x = inversesqrt(t16_0.x);
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    t16_2.x = max(t16_0.x, 0.00100000005);
    t16_0.x = inversesqrt(t16_2.x);
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    t16_3.x = vs_TEXCOORD2.w;
    t16_3.y = vs_TEXCOORD3.w;
    t16_3.z = vs_TEXCOORD4.w;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xy = vec2(t16_27) * t16_3.xy;
    t16_27 = t16_3.z * t16_27 + 0.419999987;
    t16_2 = t16_3.xyxy / vec4(t16_27);
    t10_4.x = texture(_ParallaxMap, vs_TEXCOORD0.xy).y;
    t16_27 = _Parallax * 0.5;
    t16_27 = t10_4.x * _Parallax + (-t16_27);
    t2 = vec4(t16_27) * t16_2 + vs_TEXCOORD0;
    t10_4.xyz = texture(_BumpMap, t2.xy).xyz;
    t16_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t16_5.xyz = t16_3.yyy * vs_TEXCOORD3.xyz;
    t16_3.xyw = vs_TEXCOORD2.xyz * t16_3.xxx + t16_5.xyz;
    t16_3.xyz = vs_TEXCOORD4.xyz * t16_3.zzz + t16_3.xyw;
    t16_27 = dot(t16_3.xyz, t16_3.xyz);
    t16_27 = inversesqrt(t16_27);
    t16_3.xyz = vec3(t16_27) * t16_3.xyz;
    t16_0.w = dot(t16_3.xyz, t16_0.xyz);
    t16_0.x = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    t16_4.xy = max(t16_0.xw, vec2(0.0, 0.0));
    t16_0.x = log2(t16_4.y);
    t10_5 = texture(_SpecGlossMap, t2.xy);
    t16_0.y = (-t10_5.w) + 1.0;
    t16_18 = (-t16_0.y) + 1.0;
    t16_18 = t16_18 * 0.967999995 + 0.0299999993;
    t16_18 = log2(t16_18);
    t16_18 = 10.0 / t16_18;
    t16_18 = max(t16_18, -255.936996);
    t16_27 = t16_18 * t16_18;
    t16_0.z = t16_18 * t16_18 + 1.0;
    t16_0.x = t16_0.x * t16_27;
    t16_0.x = exp2(t16_0.x);
    t16_0.xw = vec2(t16_0.x * t16_0.z, t16_0.y * t16_0.y);
    t16_18 = t16_4.x * t16_4.x;
    t16_9.x = log2(t16_0.y);
    t16_9.x = t16_9.x * 0.75;
    t16_9.x = exp2(t16_9.x);
    t16_9.x = t16_9.x * 7.0;
    t16_18 = t16_18 * t10_5.w + t16_0.w;
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    t16_4.x = t16_18 * t16_4.x + 9.99999975e-005;
    t16_4.x = t16_0.x / t16_4.x;
    t16_0.x = max(t16_4.x, 0.0);
    t16_0.x = min(t16_0.x, 100.0);
    t10_4.xyz = texture(_DetailAlbedoMap, t2.zw).xyz;
    t16_6.xyz = t10_4.xyz * unity_ColorSpaceDouble.xyz;
    t10_4.x = texture(_DetailMask, t2.xy).w;
    t10_13.xyz = texture(_MainTex, t2.xy).xyz;
    t16_13.xyz = t10_13.xyz * _Color.xyz;
    t16_18 = (-t10_4.x) + 1.0;
    t16_6.xyz = t16_6.xyz * t10_4.xxx + vec3(t16_18);
    t16_6.xyz = t16_13.xyz * t16_6.xyz;
    t16_18 = max(t10_5.y, t10_5.x);
    t16_18 = max(t10_5.z, t16_18);
    t16_18 = (-t16_18) + 1.0;
    t16_6.xyz = vec3(t16_18) * t16_6.xyz;
    t16_18 = (-t16_18) + 1.0;
    t16_18 = t16_18 + t10_5.w;
    t16_18 = clamp(t16_18, 0.0, 1.0);
    t16_7.xyz = (-t10_5.xyz) + vec3(t16_18);
    t16_0.xzw = t16_0.xxx * t10_5.xyz + t16_6.xyz;
    t16_0.xzw = t16_0.xzw * _LightColor0.xyz;
    t16_3.w = 1.0;
    t16_8.x = dot(unity_SHAr, t16_3);
    t16_8.y = dot(unity_SHAg, t16_3);
    t16_8.z = dot(unity_SHAb, t16_3);
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    t10_4.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    t16_28 = (-_OcclusionStrength) + 1.0;
    t16_28 = t10_4.x * _OcclusionStrength + t16_28;
    t16_8.xyz = vec3(t16_28) * t16_8.xyz;
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    t16_30 = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_4.x = max(t16_30, 0.0);
    t16_0.xzw = t16_0.xzw * t16_4.xxx + t16_6.xyz;
    t16_30 = dot(t16_3.xyz, (-t16_1.xyz));
    t16_4.x = max(t16_30, 0.0);
    t16_30 = (-t16_4.x) + 1.0;
    t16_30 = t16_30 * t16_30;
    t16_30 = t16_30 * t16_30;
    t16_6.xyz = vec3(t16_30) * t16_7.xyz + t10_5.xyz;
    t16_30 = dot(t16_1.xyz, t16_3.xyz);
    t16_30 = t16_30 + t16_30;
    t16_1.xyz = t16_3.xyz * (-vec3(t16_30)) + t16_1.xyz;
    t10_2 = textureLod(unity_SpecCube0, t16_1.xyz, t16_9.x);
    t16_9.x = t10_2.w * unity_SpecCube0_HDR.x;
    t16_1.xyz = t10_2.xyz * t16_9.xxx;
    t16_1.xyz = vec3(t16_28) * t16_1.xyz;
    t16_0.xyz = t16_1.xyz * t16_6.xyz + t16_0.xzw;
    t16_4.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    t31 = vs_TEXCOORD7;
    t31 = clamp(t31, 0.0, 1.0);
    t4.xyz = vec3(t31) * t16_4.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = t4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "_PARALLAXMAP" "_DETAIL_MULX2" "_NORMALMAP" "_SPECGLOSSMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
unifo